#!/usr/bin/env python3
"""
Script para testar o fluxo de documentos nas caixas de entrada
Testa se den√∫ncias chegam na caixa da fiscaliza√ß√£o e peticionamentos no jur√≠dico
"""

import os
import sys
import django
from datetime import datetime, timedelta

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
django.setup()

from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType
from caixa_entrada.models import CaixaEntrada, HistoricoCaixaEntrada
from fiscalizacao.models import AutoInfracao
from peticionamento.models import PeticaoEletronica, TipoPeticao

def criar_usuario_teste():
    """Cria usu√°rio de teste se n√£o existir"""
    try:
        usuario = User.objects.get(username='teste_sistema')
        print(f"‚úÖ Usu√°rio de teste j√° existe: {usuario.username}")
    except User.DoesNotExist:
        usuario = User.objects.create_user(
            username='teste_sistema',
            email='teste@procon.gov.br',
            password='teste123',
            first_name='Sistema',
            last_name='Teste',
            is_staff=True
        )
        print(f"‚úÖ Usu√°rio de teste criado: {usuario.username}")
    
    return usuario

def criar_tipo_peticao_teste():
    """Cria tipo de peti√ß√£o de teste"""
    try:
        tipo = TipoPeticao.objects.get(categoria='RECURSO')
        print(f"‚úÖ Tipo de peti√ß√£o j√° existe: {tipo.nome}")
    except TipoPeticao.DoesNotExist:
        tipo = TipoPeticao.objects.create(
            nome='Recurso Administrativo',
            categoria='RECURSO',
            descricao='Recurso administrativo para testar caixa de entrada'
        )
        print(f"‚úÖ Tipo de peti√ß√£o criado: {tipo.nome}")
    
    return tipo

def testar_denuncia_fiscalizacao():
    """Testa se den√∫ncia chega na caixa da fiscaliza√ß√£o"""
    print("\n" + "="*60)
    print("üß™ TESTANDO DEN√öNCIA ‚Üí CAIXA FISCALIZA√á√ÉO")
    print("="*60)
    
    try:
        # Criar auto de infra√ß√£o (simula den√∫ncia)
        auto = AutoInfracao.objects.create(
            numero='TEST-001/2025',
            data_fiscalizacao=datetime.now().date(),
            hora_fiscalizacao=datetime.now().time(),
            razao_social='Empresa Teste Den√∫ncia Ltda',
            nome_fantasia='Empresa Teste',
            atividade='Com√©rcio de Teste',
            endereco='Rua Teste, 123',
            cnpj='12.345.678/0001-90',
            telefone='(92) 99999-9999',
            relatorio='Relat√≥rio de teste para den√∫ncia',
            base_legal_cdc='Art. 39 do CDC',
            valor_multa=5000.00,
            responsavel_nome='Jo√£o Teste',
            responsavel_cpf='123.456.789-00',
            fiscal_nome='Fiscal Teste',
            status='autuado'
        )
        
        print(f"‚úÖ Auto de infra√ß√£o criado: {auto.numero}")
        
        # Verificar se documento foi criado na caixa de entrada
        documento_caixa = CaixaEntrada.objects.filter(
            content_type=ContentType.objects.get_for_model(auto),
            object_id=auto.id
        ).first()
        
        if documento_caixa:
            print(f"‚úÖ Documento criado na caixa de entrada:")
            print(f"   üìÑ Protocolo: {documento_caixa.numero_protocolo}")
            print(f"   üì¨ Setor Destino: {documento_caixa.setor_destino}")
            print(f"   üìã Tipo: {documento_caixa.tipo_documento}")
            print(f"   üè¢ Empresa: {documento_caixa.empresa_nome}")
            print(f"   ‚ö° Prioridade: {documento_caixa.prioridade}")
            
            # Verificar se chegou na caixa da fiscaliza√ß√£o
            if documento_caixa.setor_destino == 'Fiscaliza√ß√£o':
                print("‚úÖ SUCESSO: Den√∫ncia chegou na caixa da Fiscaliza√ß√£o!")
                return True
            else:
                print(f"‚ùå ERRO: Den√∫ncia foi para {documento_caixa.setor_destino}, deveria ir para Fiscaliza√ß√£o")
                return False
        else:
            print("‚ùå ERRO: Documento n√£o foi criado na caixa de entrada")
            return False
            
    except Exception as e:
        print(f"‚ùå ERRO ao testar den√∫ncia: {e}")
        return False

def testar_peticionamento_juridico():
    """Testa se peticionamento chega na caixa do jur√≠dico"""
    print("\n" + "="*60)
    print("üß™ TESTANDO PETICIONAMENTO ‚Üí CAIXA JUR√çDICO")
    print("="*60)
    
    try:
        # Criar tipo de peti√ß√£o
        tipo_peticao = criar_tipo_peticao_teste()
        
        # Criar peti√ß√£o eletr√¥nica
        peticao = PeticaoEletronica.objects.create(
            tipo_peticao=tipo_peticao,
            origem='PORTAL_CIDADAO',
            assunto='Recurso Administrativo - Teste',
            descricao='Peti√ß√£o de teste para verificar fluxo da caixa de entrada',
            peticionario_nome='Advogado Teste',
            peticionario_documento='123.456.789-00',
            peticionario_email='advogado@teste.com',
            peticionario_telefone='(92) 88888-8888',
            peticionario_endereco='Rua do Advogado, 456',
            empresa_nome='Empresa Teste Peticionamento',
            empresa_cnpj='98.765.432/0001-10',
            status='ENVIADA',
            ip_origem='127.0.0.1',
            user_agent='Script de Teste'
        )
        
        print(f"‚úÖ Peti√ß√£o eletr√¥nica criada: {peticao.numero_peticao}")
        
        # Verificar se documento foi criado na caixa de entrada
        documento_caixa = CaixaEntrada.objects.filter(
            content_type=ContentType.objects.get_for_model(peticao),
            object_id=peticao.id
        ).first()
        
        if documento_caixa:
            print(f"‚úÖ Documento criado na caixa de entrada:")
            print(f"   üìÑ Protocolo: {documento_caixa.numero_protocolo}")
            print(f"   üì¨ Setor Destino: {documento_caixa.setor_destino}")
            print(f"   üìã Tipo: {documento_caixa.tipo_documento}")
            print(f"   üë§ Peticion√°rio: {documento_caixa.remetente_nome}")
            print(f"   ‚ö° Prioridade: {documento_caixa.prioridade}")
            
            # Verificar se chegou na caixa do jur√≠dico
            if documento_caixa.setor_destino == 'Jur√≠dico':
                print("‚úÖ SUCESSO: Peticionamento chegou na caixa do Jur√≠dico!")
                return True
            else:
                print(f"‚ùå ERRO: Peticionamento foi para {documento_caixa.setor_destino}, deveria ir para Jur√≠dico")
                return False
        else:
            print("‚ùå ERRO: Documento n√£o foi criado na caixa de entrada")
            return False
            
    except Exception as e:
        print(f"‚ùå ERRO ao testar peticionamento: {e}")
        return False

def verificar_caixas_entrada():
    """Verifica o conte√∫do atual das caixas de entrada"""
    print("\n" + "="*60)
    print("üì¨ VERIFICANDO CAIXAS DE ENTRADA")
    print("="*60)
    
    # Contar documentos por setor
    setores = ['Atendimento', 'Fiscaliza√ß√£o', 'Jur√≠dico', 'Financeiro', 'Diretoria']
    
    for setor in setores:
        count = CaixaEntrada.objects.filter(setor_destino=setor).count()
        print(f"üì¨ {setor}: {count} documento(s)")
        
        # Mostrar √∫ltimos 3 documentos
        documentos = CaixaEntrada.objects.filter(
            setor_destino=setor
        ).order_by('-data_entrada')[:3]
        
        for doc in documentos:
            print(f"   ‚Ä¢ {doc.numero_protocolo} - {doc.assunto[:50]}...")

def limpar_dados_teste():
    """Remove dados de teste criados"""
    print("\n" + "="*60)
    print("üßπ LIMPANDO DADOS DE TESTE")
    print("="*60)
    
    try:
        # Remover documentos de teste da caixa de entrada
        docs_removidos = CaixaEntrada.objects.filter(
            assunto__icontains='Teste'
        ).delete()
        print(f"‚úÖ {docs_removidos[0]} documentos de teste removidos da caixa de entrada")
        
        # Remover autos de teste
        autos_removidos = AutoInfracao.objects.filter(
            numero__icontains='TEST'
        ).delete()
        print(f"‚úÖ {autos_removidos[0]} autos de teste removidos")
        
        # Remover peti√ß√µes de teste
        peticoes_removidas = PeticaoEletronica.objects.filter(
            assunto__icontains='Teste'
        ).delete()
        print(f"‚úÖ {peticoes_removidas[0]} peti√ß√µes de teste removidas")
        
    except Exception as e:
        print(f"‚ùå ERRO ao limpar dados: {e}")

def main():
    """Fun√ß√£o principal do teste"""
    print("üöÄ INICIANDO TESTE DE FLUXO DAS CAIXAS DE ENTRADA")
    print("="*60)
    
    # Criar usu√°rio de teste
    usuario = criar_usuario_teste()
    
    # Verificar estado inicial
    print("\nüìä ESTADO INICIAL DAS CAIXAS:")
    verificar_caixas_entrada()
    
    # Executar testes
    sucesso_denuncia = testar_denuncia_fiscalizacao()
    sucesso_peticionamento = testar_peticionamento_juridico()
    
    # Verificar estado final
    print("\nüìä ESTADO FINAL DAS CAIXAS:")
    verificar_caixas_entrada()
    
    # Resultado final
    print("\n" + "="*60)
    print("üìã RESULTADO DOS TESTES")
    print("="*60)
    
    if sucesso_denuncia:
        print("‚úÖ DEN√öNCIA: Fluxo funcionando corretamente")
    else:
        print("‚ùå DEN√öNCIA: Problema no fluxo")
    
    if sucesso_peticionamento:
        print("‚úÖ PETICIONAMENTO: Fluxo funcionando corretamente")
    else:
        print("‚ùå PETICIONAMENTO: Problema no fluxo")
    
    if sucesso_denuncia and sucesso_peticionamento:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ As den√∫ncias chegam na caixa da Fiscaliza√ß√£o")
        print("‚úÖ Os peticionamentos chegam na caixa do Jur√≠dico")
    else:
        print("\n‚ö†Ô∏è ALGUNS TESTES FALHARAM!")
        print("Verifique os logs acima para identificar os problemas")
    
    # Perguntar se quer limpar dados de teste
    resposta = input("\nüßπ Deseja limpar os dados de teste? (s/n): ").lower()
    if resposta in ['s', 'sim', 'y', 'yes']:
        limpar_dados_teste()
        print("‚úÖ Dados de teste removidos")
    else:
        print("‚ÑπÔ∏è Dados de teste mantidos para inspe√ß√£o manual")

if __name__ == '__main__':
    main()
