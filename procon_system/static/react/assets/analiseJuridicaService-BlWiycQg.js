import{b as s}from"./main-QkSqPps8.js";class o{constructor(){this.baseURL="/api/analise-juridica/"}async obterEstatisticas(){try{return(await s.get(`${this.baseURL}estatisticas/`)).data}catch(r){throw console.error("Erro ao obter estatísticas:",r),r}}async obterAnalisesRecentes(r=10){try{return(await s.get(`${this.baseURL}analises-recentes/`,{params:{limit:r}})).data}catch(a){throw console.error("Erro ao obter análises recentes:",a),a}}async obterAnalistasTop(r=10){try{return(await s.get(`${this.baseURL}analistas-top/`,{params:{limit:r}})).data}catch(a){throw console.error("Erro ao obter analistas top:",a),a}}async obterAnalisesPorTipo(){try{return(await s.get(`${this.baseURL}analises-por-tipo/`)).data}catch(r){throw console.error("Erro ao obter análises por tipo:",r),r}}async obterAnalisesPorStatus(){try{return(await s.get(`${this.baseURL}analises-por-status/`)).data}catch(r){throw console.error("Erro ao obter análises por status:",r),r}}async listarAnalises(r={}){try{return(await s.get(`${this.baseURL}analises/`,{params:r})).data}catch(a){throw console.error("Erro ao listar análises:",a),a}}async obterAnalise(r){try{return(await s.get(`${this.baseURL}analises/${r}/`)).data}catch(a){throw console.error("Erro ao obter análise:",a),a}}async criarAnalise(r){try{return(await s.post(`${this.baseURL}analises/`,r)).data}catch(a){throw console.error("Erro ao criar análise:",a),a}}async atualizarAnalise(r,a){try{return(await s.put(`${this.baseURL}analises/${r}/`,a)).data}catch(e){throw console.error("Erro ao atualizar análise:",e),e}}async deletarAnalise(r){try{return await s.delete(`${this.baseURL}analises/${r}/`),!0}catch(a){throw console.error("Erro ao deletar análise:",a),a}}async filtrarAnalises(r){try{return(await s.get(`${this.baseURL}filtrar/`,{params:r})).data}catch(a){throw console.error("Erro ao filtrar análises:",a),a}}async buscarAnalises(r){try{return(await s.get(`${this.baseURL}buscar/`,{params:{q:r}})).data}catch(a){throw console.error("Erro ao buscar análises:",a),a}}async listarAnalistas(){try{return(await s.get(`${this.baseURL}analistas/`)).data}catch(r){throw console.error("Erro ao listar analistas:",r),r}}async obterAnalista(r){try{return(await s.get(`${this.baseURL}analistas/${r}/`)).data}catch(a){throw console.error("Erro ao obter analista:",a),a}}async criarAnalista(r){try{return(await s.post(`${this.baseURL}analistas/`,r)).data}catch(a){throw console.error("Erro ao criar analista:",a),a}}async atualizarAnalista(r,a){try{return(await s.put(`${this.baseURL}analistas/${r}/`,a)).data}catch(e){throw console.error("Erro ao atualizar analista:",e),e}}async deletarAnalista(r){try{return await s.delete(`${this.baseURL}analistas/${r}/`),!0}catch(a){throw console.error("Erro ao deletar analista:",a),a}}async uploadDocumento(r,a){try{const e=new FormData;return e.append("arquivo",a),(await s.post(`${this.baseURL}analises/${r}/documentos/`,e,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(e){throw console.error("Erro ao fazer upload do documento:",e),e}}async listarDocumentos(r){try{return(await s.get(`${this.baseURL}analises/${r}/documentos/`)).data}catch(a){throw console.error("Erro ao listar documentos:",a),a}}async deletarDocumento(r,a){try{return await s.delete(`${this.baseURL}analises/${r}/documentos/${a}/`),!0}catch(e){throw console.error("Erro ao deletar documento:",e),e}}async criarParecer(r,a){try{return(await s.post(`${this.baseURL}analises/${r}/pareceres/`,a)).data}catch(e){throw console.error("Erro ao criar parecer:",e),e}}async atualizarParecer(r,a,e){try{return(await s.put(`${this.baseURL}analises/${r}/pareceres/${a}/`,e)).data}catch(t){throw console.error("Erro ao atualizar parecer:",t),t}}async listarPareceres(r){try{return(await s.get(`${this.baseURL}analises/${r}/pareceres/`)).data}catch(a){throw console.error("Erro ao listar pareceres:",a),a}}async atribuirAnalista(r,a){try{return(await s.post(`${this.baseURL}analises/${r}/atribuir/`,{analista_id:a})).data}catch(e){throw console.error("Erro ao atribuir analista:",e),e}}async alterarStatus(r,a){try{return(await s.post(`${this.baseURL}analises/${r}/status/`,{status:a})).data}catch(e){throw console.error("Erro ao alterar status:",e),e}}async definirPrioridade(r,a){try{return(await s.post(`${this.baseURL}analises/${r}/prioridade/`,{prioridade:a})).data}catch(e){throw console.error("Erro ao definir prioridade:",e),e}}async gerarRelatorio(r={}){try{return(await s.get(`${this.baseURL}relatorios/`,{params:r})).data}catch(a){throw console.error("Erro ao gerar relatório:",a),a}}async exportarAnalises(r="excel",a={}){try{return(await s.get(`${this.baseURL}exportar/`,{params:{formato:r,...a},responseType:"blob"})).data}catch(e){throw console.error("Erro ao exportar análises:",e),e}}async enviarNotificacao(r,a,e){try{return(await s.post(`${this.baseURL}analises/${r}/notificar/`,{tipo:a,destinatarios:e})).data}catch(t){throw console.error("Erro ao enviar notificação:",t),t}}validarDadosAnalise(r){const a=[];return(!r.titulo||r.titulo.trim().length<3)&&a.push("Título deve ter pelo menos 3 caracteres"),(!r.descricao||r.descricao.trim().length<10)&&a.push("Descrição deve ter pelo menos 10 caracteres"),r.tipo||a.push("Tipo de análise é obrigatório"),r.prioridade||a.push("Prioridade é obrigatória"),a}formatarStatus(r){return{PENDENTE:"Pendente",EM_ANALISE:"Em Análise",CONCLUIDA:"Concluída",CANCELADA:"Cancelada"}[r]||r}formatarTipo(r){return{CONTRATO:"Contrato",PROCESSO:"Processo",PARECER:"Parecer",RECURSO:"Recurso",LEGISLACAO:"Legislação"}[r]||r}formatarPrioridade(r){return{ALTA:"Alta",MEDIA:"Média",BAIXA:"Baixa"}[r]||r}getStatusColor(r){return{PENDENTE:"#f59e0b",EM_ANALISE:"#3b82f6",CONCLUIDA:"#10b981",CANCELADA:"#ef4444"}[r]||"#6b7280"}getTipoColor(r){return{CONTRATO:"#3b82f6",PROCESSO:"#059669",PARECER:"#d97706",RECURSO:"#7c3aed",LEGISLACAO:"#dc2626"}[r]||"#6b7280"}formatarData(r){return r?new Date(r).toLocaleString("pt-BR"):"N/A"}formatarTempo(r){if(!r)return"N/A";const a=Math.floor(r/60),e=r%60;return a>0?`${a}h ${e}min`:`${e}min`}async listarProcessos(){try{const r=await s.get("/api/processos/");return r.data.results||r.data||[]}catch(r){return console.error("Erro ao listar processos:",r),[]}}}const c=new o;export{c as a};
