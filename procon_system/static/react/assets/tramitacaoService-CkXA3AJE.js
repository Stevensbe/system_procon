import{b as t}from"./main-QkSqPps8.js";class c{async obterEstatisticas(){try{return(await t.get("/protocolo-tramitacao/estatisticas/")).data}catch(r){throw console.error("Erro ao obter estatísticas:",r),r}}async listarTramitacoes(r={}){try{const o=new URLSearchParams;return Object.keys(r).forEach(e=>{r[e]!==""&&r[e]!==null&&r[e]!==void 0&&o.append(e,r[e])}),(await t.get(`/protocolo-tramitacao/tramitacoes/?${o.toString()}`)).data}catch(o){throw console.error("Erro ao listar tramitações:",o),o}}async listarTramitacoesPendentes(){try{return(await t.get("/protocolo-tramitacao/tramitacoes-pendentes/")).data}catch(r){throw console.error("Erro ao listar tramitações pendentes:",r),r}}async listarTramitacoesRecentes(r=10){try{return(await t.get(`/protocolo-tramitacao/tramitacoes/?limite=${r}`)).data}catch(o){throw console.error("Erro ao listar tramitações recentes:",o),o}}async listarTramitacoesPorProtocolo(r){try{return(await t.get(`/protocolo-tramitacao/tramitacoes/?protocolo=${r}`)).data}catch(o){throw console.error("Erro ao listar tramitações do protocolo:",o),o}}async listarTramitacoesPorSetor(r,o="destino"){try{return(await t.get(`/protocolo-tramitacao/tramitacoes/?setor=${r}&tipo=${o}`)).data}catch(a){throw console.error("Erro ao listar tramitações do setor:",a),a}}async listarTramitacoesAtrasadas(){try{return(await t.get("/protocolo-tramitacao/tramitacoes/?atrasadas=true")).data}catch(r){throw console.error("Erro ao listar tramitações atrasadas:",r),r}}async obterTramitacao(r){try{return(await t.get(`/protocolo-tramitacao/tramitacoes/${r}/`)).data}catch(o){throw console.error("Erro ao obter tramitação:",o),o}}async obterHistoricoTramitacao(r){try{return(await t.get(`/protocolo-tramitacao/tramitacoes/${r}/historico/`)).data}catch(o){throw console.error("Erro ao obter histórico da tramitação:",o),o}}async obterAnexosTramitacao(r){try{return(await t.get(`/protocolo-tramitacao/tramitacoes/${r}/anexos/`)).data}catch(o){throw console.error("Erro ao obter anexos da tramitação:",o),o}}async criarTramitacao(r){try{return(await t.post("/protocolo-tramitacao/tramitacoes/",r)).data}catch(o){throw console.error("Erro ao criar tramitação:",o),o}}async atualizarTramitacao(r,o){try{return(await t.put(`/tramitacao/${r}/`,o)).data}catch(a){throw console.error("Erro ao atualizar tramitação:",a),a}}async atualizarTramitacaoParcial(r,o){try{return(await t.patch(`/protocolo-tramitacao/tramitacoes/${r}/`,o)).data}catch(a){throw console.error("Erro ao atualizar tramitação parcialmente:",a),a}}async enviarTramitacao(r,o={}){try{return(await t.post(`/protocolo-tramitacao/tramitacoes/${r}/enviar/`,o)).data}catch(a){throw console.error("Erro ao enviar tramitação:",a),a}}async receberTramitacao(r,o={}){try{return(await t.post(`/protocolo-tramitacao/tramitacoes/${r}/receber/`,o)).data}catch(a){throw console.error("Erro ao receber tramitação:",a),a}}async cancelarTramitacao(r,o){try{return(await t.post(`/protocolo-tramitacao/tramitacoes/${r}/cancelar/`,{motivo:o})).data}catch(a){throw console.error("Erro ao cancelar tramitação:",a),a}}async reenviarTramitacao(r,o={}){try{return(await t.post(`/protocolo-tramitacao/tramitacoes/${r}/reenviar/`,o)).data}catch(a){throw console.error("Erro ao reenviar tramitação:",a),a}}async marcarUrgente(r){try{return(await t.post(`/protocolo-tramitacao/tramitacoes/${r}/urgente/`)).data}catch(o){throw console.error("Erro ao marcar como urgente:",o),o}}async definirPrazo(r,o){try{return(await t.post(`/protocolo-tramitacao/tramitacoes/${r}/prazo/`,{prazo:o})).data}catch(a){throw console.error("Erro ao definir prazo:",a),a}}async uploadAnexo(r,o,a=""){try{const e=new FormData;return e.append("arquivo",o),e.append("descricao",a),(await t.post(`/protocolo-tramitacao/tramitacoes/${r}/anexos/`,e,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(e){throw console.error("Erro ao fazer upload do anexo:",e),e}}async removerAnexo(r,o){try{return(await t.delete(`/protocolo-tramitacao/tramitacoes/${r}/anexos/${o}/`)).data}catch(a){throw console.error("Erro ao remover anexo:",a),a}}async gerarRelatorio(r={}){try{const o=new URLSearchParams(r),a=await t.get(`/protocolo-tramitacao/relatorio/?${o.toString()}`)}catch(o){throw console.error("Erro ao gerar relatório:",o),o}}async exportarTramitacoes(r={},o="xlsx"){try{const a=new URLSearchParams({...r,formato:o});return(await t.get(`/protocolo-tramitacao/exportar/?${a.toString()}`,{responseType:"blob"})).data}catch(a){throw console.error("Erro ao exportar tramitações:",a),a}}async obterEstatisticasPorPeriodo(r,o){try{return(await t.get("/protocolo-tramitacao/estatisticas/periodo/",{params:{data_inicio:r,data_fim:o}})).data}catch(a){throw console.error("Erro ao obter estatísticas por período:",a),a}}async obterEstatisticasPorSetor(){try{return(await t.get("/protocolo-tramitacao/estatisticas/setores/")).data}catch(r){throw console.error("Erro ao obter estatísticas por setor:",r),r}}async listarSetores(){try{return(await t.get("/protocolo-tramitacao/setores/")).data}catch(r){throw console.error("Erro ao listar setores:",r),r}}async listarTiposDocumento(){try{return(await t.get("/protocolo-tramitacao/tipos-documento/")).data}catch(r){throw console.error("Erro ao listar tipos de documento:",r),r}}async listarUsuarios(){try{return(await t.get("/protocolo-tramitacao/usuarios/")).data}catch(r){throw console.error("Erro ao listar usuários:",r),r}}async obterConfiguracoes(){try{return(await t.get("/protocolo-tramitacao/configuracoes/")).data}catch(r){throw console.error("Erro ao obter configurações:",r),r}}async enviarNotificacao(r,o,a=[]){try{return(await t.post(`/protocolo-tramitacao/tramitacoes/${r}/notificar/`,{tipo:o,destinatarios:a})).data}catch(e){throw console.error("Erro ao enviar notificação:",e),e}}async obterNotificacoes(r){try{return(await t.get(`/protocolo-tramitacao/tramitacoes/${r}/notificacoes/`)).data}catch(o){throw console.error("Erro ao obter notificações:",o),o}}validarDadosTramitacao(r){const o=[];return r.protocolo||o.push("Protocolo é obrigatório"),r.setor_destino||o.push("Setor de destino é obrigatório"),r.data_tramitacao||o.push("Data de tramitação é obrigatória"),o}formatarNumeroProtocolo(r){return r?r.toString().padStart(8,"0"):"N/A"}formatarStatus(r){return{PENDENTE:{label:"Pendente",color:"yellow"},ENVIADA:{label:"Enviada",color:"blue"},RECEBIDA:{label:"Recebida",color:"green"},ATRASADA:{label:"Atrasada",color:"red"},CANCELADA:{label:"Cancelada",color:"gray"}}[r]||{label:r,color:"gray"}}calcularDiasAtraso(r){if(!r)return 0;const o=new Date,a=new Date(r),e=o-a,s=Math.ceil(e/(1e3*60*60*24));return s>0?s:0}verificarAtraso(r){return r.prazo_limite?this.calcularDiasAtraso(r.prazo_limite)>0:!1}}const p=new c;export{p as t};
