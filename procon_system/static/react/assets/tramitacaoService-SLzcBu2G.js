import{F as t}from"./main-BZolao6g.js";class c{async obterEstatisticas(){try{return(await t.get("/api/tramitacao/estatisticas/")).data}catch(r){throw console.error("Erro ao obter estatísticas:",r),r}}async listarTramitacoes(r={}){try{const a=new URLSearchParams;return Object.keys(r).forEach(e=>{r[e]!==""&&r[e]!==null&&r[e]!==void 0&&a.append(e,r[e])}),(await t.get(`/api/tramitacao/?${a.toString()}`)).data}catch(a){throw console.error("Erro ao listar tramitações:",a),a}}async listarTramitacoesPendentes(){try{return(await t.get("/api/tramitacao/pendentes/")).data}catch(r){throw console.error("Erro ao listar tramitações pendentes:",r),r}}async listarTramitacoesRecentes(r=10){try{return(await t.get(`/api/tramitacao/recentes/?limite=${r}`)).data}catch(a){throw console.error("Erro ao listar tramitações recentes:",a),a}}async listarTramitacoesPorProtocolo(r){try{return(await t.get(`/api/tramitacao/protocolo/${r}/`)).data}catch(a){throw console.error("Erro ao listar tramitações do protocolo:",a),a}}async listarTramitacoesPorSetor(r,a="destino"){try{return(await t.get(`/api/tramitacao/setor/${r}/?tipo=${a}`)).data}catch(o){throw console.error("Erro ao listar tramitações do setor:",o),o}}async listarTramitacoesAtrasadas(){try{return(await t.get("/api/tramitacao/atrasadas/")).data}catch(r){throw console.error("Erro ao listar tramitações atrasadas:",r),r}}async obterTramitacao(r){try{return(await t.get(`/api/tramitacao/${r}/`)).data}catch(a){throw console.error("Erro ao obter tramitação:",a),a}}async obterHistoricoTramitacao(r){try{return(await t.get(`/api/tramitacao/${r}/historico/`)).data}catch(a){throw console.error("Erro ao obter histórico da tramitação:",a),a}}async obterAnexosTramitacao(r){try{return(await t.get(`/api/tramitacao/${r}/anexos/`)).data}catch(a){throw console.error("Erro ao obter anexos da tramitação:",a),a}}async criarTramitacao(r){try{return(await t.post("/api/tramitacao/",r)).data}catch(a){throw console.error("Erro ao criar tramitação:",a),a}}async atualizarTramitacao(r,a){try{return(await t.put(`/api/tramitacao/${r}/`,a)).data}catch(o){throw console.error("Erro ao atualizar tramitação:",o),o}}async atualizarTramitacaoParcial(r,a){try{return(await t.patch(`/api/tramitacao/${r}/`,a)).data}catch(o){throw console.error("Erro ao atualizar tramitação parcialmente:",o),o}}async enviarTramitacao(r,a={}){try{return(await t.post(`/api/tramitacao/${r}/enviar/`,a)).data}catch(o){throw console.error("Erro ao enviar tramitação:",o),o}}async receberTramitacao(r,a={}){try{return(await t.post(`/api/tramitacao/${r}/receber/`,a)).data}catch(o){throw console.error("Erro ao receber tramitação:",o),o}}async cancelarTramitacao(r,a){try{return(await t.post(`/api/tramitacao/${r}/cancelar/`,{motivo:a})).data}catch(o){throw console.error("Erro ao cancelar tramitação:",o),o}}async reenviarTramitacao(r,a={}){try{return(await t.post(`/api/tramitacao/${r}/reenviar/`,a)).data}catch(o){throw console.error("Erro ao reenviar tramitação:",o),o}}async marcarUrgente(r){try{return(await t.post(`/api/tramitacao/${r}/urgente/`)).data}catch(a){throw console.error("Erro ao marcar como urgente:",a),a}}async definirPrazo(r,a){try{return(await t.post(`/api/tramitacao/${r}/prazo/`,{prazo:a})).data}catch(o){throw console.error("Erro ao definir prazo:",o),o}}async uploadAnexo(r,a,o=""){try{const e=new FormData;return e.append("arquivo",a),e.append("descricao",o),(await t.post(`/api/tramitacao/${r}/anexos/`,e,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(e){throw console.error("Erro ao fazer upload do anexo:",e),e}}async removerAnexo(r,a){try{return(await t.delete(`/api/tramitacao/${r}/anexos/${a}/`)).data}catch(o){throw console.error("Erro ao remover anexo:",o),o}}async gerarRelatorio(r={}){try{const a=new URLSearchParams(r);return(await t.get(`/api/tramitacao/relatorio/?${a.toString()}`)).data}catch(a){throw console.error("Erro ao gerar relatório:",a),a}}async exportarTramitacoes(r={},a="xlsx"){try{const o=new URLSearchParams({...r,formato:a});return(await t.get(`/api/tramitacao/exportar/?${o.toString()}`,{responseType:"blob"})).data}catch(o){throw console.error("Erro ao exportar tramitações:",o),o}}async obterEstatisticasPorPeriodo(r,a){try{return(await t.get("/api/tramitacao/estatisticas/periodo/",{params:{data_inicio:r,data_fim:a}})).data}catch(o){throw console.error("Erro ao obter estatísticas por período:",o),o}}async obterEstatisticasPorSetor(){try{return(await t.get("/api/tramitacao/estatisticas/setores/")).data}catch(r){throw console.error("Erro ao obter estatísticas por setor:",r),r}}async listarSetores(){try{return(await t.get("/api/tramitacao/setores/")).data}catch(r){throw console.error("Erro ao listar setores:",r),r}}async listarTiposDocumento(){try{return(await t.get("/api/tramitacao/tipos-documento/")).data}catch(r){throw console.error("Erro ao listar tipos de documento:",r),r}}async listarUsuarios(){try{return(await t.get("/api/tramitacao/usuarios/")).data}catch(r){throw console.error("Erro ao listar usuários:",r),r}}async obterConfiguracoes(){try{return(await t.get("/api/tramitacao/configuracoes/")).data}catch(r){throw console.error("Erro ao obter configurações:",r),r}}async enviarNotificacao(r,a,o=[]){try{return(await t.post(`/api/tramitacao/${r}/notificar/`,{tipo:a,destinatarios:o})).data}catch(e){throw console.error("Erro ao enviar notificação:",e),e}}async obterNotificacoes(r){try{return(await t.get(`/api/tramitacao/${r}/notificacoes/`)).data}catch(a){throw console.error("Erro ao obter notificações:",a),a}}validarDadosTramitacao(r){const a=[];return r.protocolo||a.push("Protocolo é obrigatório"),r.setor_destino||a.push("Setor de destino é obrigatório"),r.data_tramitacao||a.push("Data de tramitação é obrigatória"),a}formatarNumeroProtocolo(r){return r?r.toString().padStart(8,"0"):"N/A"}formatarStatus(r){return{PENDENTE:{label:"Pendente",color:"yellow"},ENVIADA:{label:"Enviada",color:"blue"},RECEBIDA:{label:"Recebida",color:"green"},ATRASADA:{label:"Atrasada",color:"red"},CANCELADA:{label:"Cancelada",color:"gray"}}[r]||{label:r,color:"gray"}}calcularDiasAtraso(r){if(!r)return 0;const a=new Date,o=new Date(r),e=a-o,s=Math.ceil(e/(1e3*60*60*24));return s>0?s:0}verificarAtraso(r){return r.prazo_limite?this.calcularDiasAtraso(r.prazo_limite)>0:!1}}const p=new c;export{p as t};
