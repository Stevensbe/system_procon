class s{constructor(){this.baseURL="/api/cobranca",this.updateToken()}updateToken(){this.token=localStorage.getItem("procon-auth-token")}getHeaders(e=!1){this.updateToken();const r={Accept:"application/json"};return e||(r["Content-Type"]="application/json"),this.token&&(r.Authorization=`Bearer ${this.token}`),r}async makeRequest(e,r={}){const o=r.body instanceof FormData,a={...r,headers:{...this.getHeaders(o),...r.headers}};try{const t=await fetch(e,a);return t.status===401?(await this.refreshToken(),a.headers={...this.getHeaders(o),...r.headers},await fetch(e,a)):t}catch(t){throw console.error("Erro na requisição:",t),t}}async refreshToken(){try{const e=localStorage.getItem("procon-refresh-token");if(!e)throw new Error("Refresh token não encontrado");const r=await fetch("/auth/token/refresh/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({refresh:e})});if(r.ok){const o=await r.json();return this.token=o.access,localStorage.setItem("procon-auth-token",o.access),!0}else throw localStorage.removeItem("procon-auth-token"),localStorage.removeItem("procon-refresh-token"),this.token=null,new Error("Token refresh failed")}catch(e){throw console.error("Erro ao renovar token:",e),localStorage.removeItem("procon-auth-token"),localStorage.removeItem("procon-refresh-token"),this.token=null,e}}async getEstatisticas(){try{const e=await this.makeRequest(`${this.baseURL}/geral/estatisticas/`);if(!e.ok)throw new Error("Erro ao carregar estatisticas");return await e.json()}catch(e){return console.error("Erro ao carregar estatisticas:",e),this.getMockEstatisticas()}}async getBoletosRecentes(){try{const e=await this.makeRequest(`${this.baseURL}/boletos/boletos-recentes/`);if(!e.ok)throw new Error("Erro ao carregar boletos recentes");return await e.json()}catch(e){return console.error("Erro ao carregar boletos recentes:",e),this.getMockBoletosRecentes()}}async getPagamentosRecentes(){try{const e=await this.makeRequest(`${this.baseURL}/pagamentos/pagamentos-recentes/`);if(!e.ok)throw new Error("Erro ao carregar pagamentos recentes");return await e.json()}catch(e){return console.error("Erro ao carregar pagamentos recentes:",e),this.getMockPagamentosRecentes()}}async getRemessasRecentes(){try{const e=await this.makeRequest(`${this.baseURL}/cobrancas/cobrancas-recentes/`);if(!e.ok)throw new Error("Erro ao carregar cobranças recentes");return await e.json()}catch(e){return console.error("Erro ao carregar cobranças recentes:",e),this.getMockRemessasRecentes()}}async getBoletosVencidos(){try{const e=await this.makeRequest(`${this.baseURL}/boletos/boletos-vencidos/`);if(!e.ok)throw new Error("Erro ao carregar boletos vencidos");return await e.json()}catch(e){return console.error("Erro ao carregar boletos vencidos:",e),this.getMockBoletosVencidos()}}async getBoletosPorStatus(){try{const e=await this.makeRequest(`${this.baseURL}/boletos/boletos-por-status/`);if(!e.ok)throw new Error("Erro ao carregar boletos por status");return await e.json()}catch(e){return console.error("Erro ao carregar boletos por status:",e),this.getMockBoletosPorStatus()}}async getPagamentosPorMes(){try{const e=await this.makeRequest(`${this.baseURL}/pagamentos/pagamentos-por-mes/`);if(!e.ok)throw new Error("Erro ao carregar pagamentos por mes");return await e.json()}catch(e){return console.error("Erro ao carregar pagamentos por mes:",e),this.getMockPagamentosPorMes()}}async getRemessasPorStatus(){try{const e=await this.makeRequest(`${this.baseURL}/cobrancas/cobrancas-por-status/`);if(!e.ok)throw new Error("Erro ao carregar cobranças por status");return await e.json()}catch(e){return console.error("Erro ao carregar cobranças por status:",e),this.getMockRemessasPorStatus()}}async getBoletos(e={}){try{const r=new URLSearchParams;e.page&&r.append("page",e.page),e.search&&r.append("search",e.search),e.filters&&Object.keys(e.filters).forEach(a=>{e.filters[a]&&r.append(a,e.filters[a])}),e.sorting&&(r.append("sort_by",e.sorting.field),r.append("sort_direction",e.sorting.direction));const o=await this.makeRequest(`${this.baseURL}/boletos/?${r}`);if(!o.ok)throw new Error("Erro ao carregar boletos");return await o.json()}catch(r){return console.error("Erro ao carregar boletos:",r),this.getMockBoletos(e)}}async getBoleto(e){try{const r=await this.makeRequest(`${this.baseURL}/boletos/${e}/`);if(!r.ok)throw new Error("Erro ao carregar boleto");return await r.json()}catch(r){return console.error("Erro ao carregar boleto:",r),this.getMockBoleto(e)}}async createBoleto(e){try{const r=await this.makeRequest(`${this.baseURL}/boletos/`,{method:"POST",body:e});if(!r.ok)throw new Error("Erro ao criar boleto");return await r.json()}catch(r){throw console.error("Erro ao criar boleto:",r),r}}async updateBoleto(e,r){try{const o=await this.makeRequest(`${this.baseURL}/boletos/${e}/`,{method:"PUT",body:r});if(!o.ok)throw new Error("Erro ao atualizar boleto");return await o.json()}catch(o){throw console.error("Erro ao atualizar boleto:",o),o}}async deleteBoleto(e){try{if(!(await this.makeRequest(`${this.baseURL}/boletos/${e}/`,{method:"DELETE"})).ok)throw new Error("Erro ao excluir boleto");return!0}catch(r){throw console.error("Erro ao excluir boleto:",r),r}}async updateBoletoStatus(e,r){try{const o=await this.makeRequest(`${this.baseURL}/boletos/${e}/status/`,{method:"PATCH",headers:{"Content-Type":"application/json"},body:JSON.stringify({status:r})});if(!o.ok)throw new Error("Erro ao atualizar status");return await o.json()}catch(o){throw console.error("Erro ao atualizar status:",o),o}}async getPagamentos(e={}){try{const r=new URLSearchParams;e.page&&r.append("page",e.page),e.search&&r.append("search",e.search),e.filters&&Object.keys(e.filters).forEach(a=>{e.filters[a]&&r.append(a,e.filters[a])});const o=await this.makeRequest(`${this.baseURL}/pagamentos/?${r}`);if(!o.ok)throw new Error("Erro ao carregar pagamentos");return await o.json()}catch(r){return console.error("Erro ao carregar pagamentos:",r),this.getMockPagamentos(e)}}async getPagamento(e){try{const r=await this.makeRequest(`${this.baseURL}/pagamentos/${e}/`);if(!r.ok)throw new Error("Erro ao carregar pagamento");return await r.json()}catch(r){return console.error("Erro ao carregar pagamento:",r),this.getMockPagamento(e)}}async processarPagamento(e){try{const r=await this.makeRequest(`${this.baseURL}/pagamentos/processar/`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!r.ok)throw new Error("Erro ao processar pagamento");return await r.json()}catch(r){throw console.error("Erro ao processar pagamento:",r),r}}async getRemessas(e={}){try{const r=new URLSearchParams;e.page&&r.append("page",e.page),e.search&&r.append("search",e.search),e.filters&&Object.keys(e.filters).forEach(a=>{e.filters[a]&&r.append(a,e.filters[a])});const o=await this.makeRequest(`${this.baseURL}/cobrancas/?${r}`);if(!o.ok)throw new Error("Erro ao carregar cobranças");return await o.json()}catch(r){return console.error("Erro ao carregar cobranças:",r),this.getMockRemessas(e)}}async getRemessa(e){try{const r=await this.makeRequest(`${this.baseURL}/cobrancas/${e}/`);if(!r.ok)throw new Error("Erro ao carregar cobrança");return await r.json()}catch(r){return console.error("Erro ao carregar cobrança:",r),this.getMockRemessa(e)}}async gerarRemessa(e){try{const r=await this.makeRequest(`${this.baseURL}/cobrancas/gerar/`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({boletos:e})});if(!r.ok)throw new Error("Erro ao gerar cobrança");return await r.json()}catch(r){throw console.error("Erro ao gerar cobrança:",r),r}}async processarRetorno(e){try{const r=new FormData;r.append("arquivo",e);const o=await this.makeRequest(`${this.baseURL}/cobrancas/retorno/`,{method:"POST",body:r});if(!o.ok)throw new Error("Erro ao processar retorno");return await o.json()}catch(r){throw console.error("Erro ao processar retorno:",r),r}}async getTiposBoleto(){try{const e=await this.makeRequest(`${this.baseURL}/configuracoes/`);if(!e.ok)throw new Error("Erro ao carregar configurações");const r=await e.json();return Array.isArray(r)?r:r.results&&Array.isArray(r.results)?r.results:r.data&&Array.isArray(r.data)?r.data:this.getMockTiposBoleto()}catch(e){return console.error("Erro ao carregar configurações:",e),this.getMockTiposBoleto()}}async getBancos(){try{const e=await this.makeRequest(`${this.baseURL}/templates/`);if(!e.ok)throw new Error("Erro ao carregar templates");const r=await e.json();return console.log("[getBancos] API response:",r),Array.isArray(r)?r:r.results&&Array.isArray(r.results)?r.results:r.data&&Array.isArray(r.data)?r.data:(console.warn("[getBancos] Unexpected data format, using mock data"),this.getMockBancos())}catch(e){return console.error("Erro ao carregar templates:",e),this.getMockBancos()}}async getProcessos(){try{const e=await this.makeRequest(`${this.baseURL}/geral/processos/`);if(!e.ok)throw new Error("Erro ao carregar processos");const r=await e.json();return Array.isArray(r)?r:r.results&&Array.isArray(r.results)?r.results:r.data&&Array.isArray(r.data)?r.data:this.getMockProcessos()}catch(e){return console.error("Erro ao carregar processos:",e),this.getMockProcessos()}}async gerarRelatorio(e){try{const r=await this.makeRequest(`${this.baseURL}/relatorios/gerar/`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!r.ok)throw new Error("Erro ao gerar relatorio");return await r.json()}catch(r){throw console.error("Erro ao gerar relatorio:",r),r}}async exportarBoletos(e){try{const r=new URLSearchParams;e.filters&&Object.keys(e.filters).forEach(a=>{e.filters[a]&&r.append(a,e.filters[a])});const o=await this.makeRequest(`${this.baseURL}/boletos/exportar/?${r}`);if(!o.ok)throw new Error("Erro ao exportar boletos");return await o.blob()}catch(r){throw console.error("Erro ao exportar boletos:",r),r}}getMockEstatisticas(){return{totalEmAberto:125000.5,recebidoHoje:15e3,boletosVencidos:45,taxaPagamento:78.5,variacaoEmAberto:5.2,variacaoRecebido:-2.1,variacaoVencidos:3,variacaoTaxa:1.5}}getMockBoletosRecentes(){return[{id:1,numero:"BOL001/2024",devedor:"Empresa ABC Ltda",valor:2500,status:"pendente",vencimento:"2024-02-15"},{id:2,numero:"BOL002/2024",devedor:"Joao Silva",valor:1500,status:"pago",vencimento:"2024-02-10"},{id:3,numero:"BOL003/2024",devedor:"Maria Santos",valor:3200,status:"vencido",vencimento:"2024-02-05"}]}getMockPagamentosRecentes(){return[{id:1,numeroBoleto:"BOL002/2024",formaPagamento:"PIX",valor:1500,dataPagamento:"2024-02-10"},{id:2,numeroBoleto:"BOL004/2024",formaPagamento:"Cartao",valor:2800,dataPagamento:"2024-02-09"}]}getMockRemessasRecentes(){return[{id:1,numero:"REM001/2024",banco:"Banco do Brasil",quantidadeBoletos:25,status:"processado"},{id:2,numero:"REM002/2024",banco:"Caixa Economica",quantidadeBoletos:18,status:"pendente"}]}getMockBoletosVencidos(){return[{id:3,numero:"BOL003/2024",devedor:"Maria Santos",documento:"123.456.789-00",valor:3200,vencimento:"2024-02-05",diasVencido:5,tipo:"multa"},{id:4,numero:"BOL005/2024",devedor:"Empresa XYZ",documento:"12.345.678/0001-90",valor:4500,vencimento:"2024-02-03",diasVencido:7,tipo:"taxa"}]}getMockBoletosPorStatus(){return[{status:"pendente",quantidade:150,percentual:45},{status:"pago",quantidade:120,percentual:36},{status:"vencido",quantidade:45,percentual:13},{status:"cancelado",quantidade:20,percentual:6}]}getMockPagamentosPorMes(){return[{mes:"Janeiro",valor:45e3,quantidade:45},{mes:"Fevereiro",valor:52e3,quantidade:52},{mes:"Marco",valor:38e3,quantidade:38}]}getMockRemessasPorStatus(){return[{status:"processado",quantidade:8,percentual:67},{status:"pendente",quantidade:3,percentual:25},{status:"erro",quantidade:1,percentual:8}]}getMockBoletos(e={}){const r=[{id:1,numero:"BOL001/2024",devedor:"Empresa ABC Ltda",documento:"12.345.678/0001-90",valor:2500,valorOriginal:2500,vencimento:"2024-02-15",status:"pendente",tipo:"multa",banco:"Banco do Brasil",diasVencido:0},{id:2,numero:"BOL002/2024",devedor:"Joao Silva",documento:"123.456.789-00",valor:1500,valorOriginal:1500,vencimento:"2024-02-10",status:"pago",tipo:"taxa",banco:"Caixa Economica",diasVencido:0},{id:3,numero:"BOL003/2024",devedor:"Maria Santos",documento:"987.654.321-00",valor:3200,valorOriginal:3200,vencimento:"2024-02-05",status:"vencido",tipo:"multa",banco:"Itau",diasVencido:5}];return{data:r,totalPages:1,totalItems:r.length}}getMockBoleto(e){return{id:parseInt(e),numero:`BOL${e.toString().padStart(3,"0")}/2024`,tipo:"multa",status:"pendente",valor:2500,valorOriginal:2500,vencimento:"2024-02-15",emissao:"2024-01-15",devedor:"Empresa ABC Ltda",documento:"12.345.678/0001-90",tipoDocumento:"cnpj",endereco:"Rua das Flores, 123",cidade:"Manaus",estado:"AM",cep:"69000-000",telefone:"(92) 99999-9999",email:"contato@empresaabc.com.br",banco:"001",agencia:"1234",conta:"12345-6",carteira:"17",nossoNumero:"12345678901",codigoBarras:"00193373700000001000500940144816060680935031",linhaDigitavel:"00190.00009 04448.160606 06809.350314 3 37370000000100",descricao:"Multa por infracao administrativa",observacoes:"Processo administrativo 001/2024",processo:"1",autoInfracao:"AI001/2024",multaAtraso:"2.00",jurosMora:"1.00",desconto:"0.00",descontoAte:"",documentos:[]}}getMockPagamentos(e={}){const r=[{id:1,numeroBoleto:"BOL002/2024",formaPagamento:"PIX",valor:1500,dataPagamento:"2024-02-10",status:"confirmado"},{id:2,numeroBoleto:"BOL004/2024",formaPagamento:"Cartao",valor:2800,dataPagamento:"2024-02-09",status:"confirmado"}];return{data:r,totalPages:1,totalItems:r.length}}getMockPagamento(e){return{id:parseInt(e),numeroBoleto:`BOL${e.toString().padStart(3,"0")}/2024`,formaPagamento:"PIX",valor:1500,dataPagamento:"2024-02-10",status:"confirmado",comprovante:"comprovante.pdf"}}getMockRemessas(e={}){const r=[{id:1,numero:"REM001/2024",banco:"Banco do Brasil",quantidadeBoletos:25,status:"processado",dataGeracao:"2024-02-10"},{id:2,numero:"REM002/2024",banco:"Caixa Economica",quantidadeBoletos:18,status:"pendente",dataGeracao:"2024-02-09"}];return{data:r,totalPages:1,totalItems:r.length}}getMockRemessa(e){return{id:parseInt(e),numero:`REM${e.toString().padStart(3,"0")}/2024`,banco:"Banco do Brasil",quantidadeBoletos:25,status:"processado",dataGeracao:"2024-02-10",arquivo:"remessa.txt"}}getMockTiposBoleto(){return[{id:"multa",nome:"Multa"},{id:"taxa",nome:"Taxa"},{id:"juros",nome:"Juros"},{id:"correcao",nome:"Correcao"}]}getMockBancos(){return[{codigo:"001",nome:"Banco do Brasil"},{codigo:"104",nome:"Caixa Economica Federal"},{codigo:"033",nome:"Santander"},{codigo:"341",nome:"Itau Unibanco"},{codigo:"237",nome:"Bradesco"},{codigo:"756",nome:"Sicoob"},{codigo:"748",nome:"Sicredi"}]}getMockProcessos(){return[{id:1,numero:"001/2024",empresa:"Empresa ABC Ltda"},{id:2,numero:"002/2024",empresa:"Empresa XYZ"},{id:3,numero:"003/2024",empresa:"Joao Silva"}]}async listarProcessos(){try{const e=await this.makeRequest("/api/processos/");if(!e.ok)throw new Error("Erro ao listar processos");const r=await e.json();return r.results||r||[]}catch(e){return console.error("Erro ao listar processos:",e),this.getMockProcessos()}}async listarMultas(){try{const e=await this.makeRequest("/api/multas/");if(!e.ok)throw new Error("Erro ao listar multas");const r=await e.json();return r.results||r||[]}catch(e){return console.error("Erro ao listar multas:",e),[]}}async obterCobranca(e){try{const r=await this.makeRequest(`${this.baseURL}/cobrancas/${e}/`);if(!r.ok)throw new Error("Erro ao obter cobrança");return await r.json()}catch(r){throw console.error("Erro ao obter cobrança:",r),r}}async criarCobranca(e){try{const r=await this.makeRequest(`${this.baseURL}/cobrancas/`,{method:"POST",body:JSON.stringify(e)});if(!r.ok)throw new Error("Erro ao criar cobrança");return await r.json()}catch(r){throw console.error("Erro ao criar cobrança:",r),r}}async atualizarCobranca(e,r){try{const o=await this.makeRequest(`${this.baseURL}/cobrancas/${e}/`,{method:"PUT",body:JSON.stringify(r)});if(!o.ok)throw new Error("Erro ao atualizar cobrança");return await o.json()}catch(o){throw console.error("Erro ao atualizar cobrança:",o),o}}async getRemessas(e={}){try{const r=new URLSearchParams;e.page&&r.append("page",e.page),e.search&&r.append("search",e.search),e.filters&&Object.keys(e.filters).forEach(a=>{e.filters[a]&&r.append(a,e.filters[a])}),e.sorting&&(r.append("sort_by",e.sorting.field),r.append("sort_direction",e.sorting.direction));const o=await this.makeRequest(`${this.baseURL}/remessas/?${r}`);if(!o.ok)throw new Error("Erro ao carregar remessas");return await o.json()}catch(r){return console.error("Erro ao carregar remessas:",r),this.getMockRemessas(e)}}async getRemessa(e){try{const r=await this.makeRequest(`${this.baseURL}/remessas/${e}/`);if(!r.ok)throw new Error("Erro ao carregar remessa");return await r.json()}catch(r){return console.error("Erro ao carregar remessa:",r),this.getMockRemessa(e)}}async createRemessa(e){try{const r=await this.makeRequest(`${this.baseURL}/remessas/`,{method:"POST",body:JSON.stringify(e)});if(!r.ok)throw new Error("Erro ao criar remessa");return await r.json()}catch(r){throw console.error("Erro ao criar remessa:",r),r}}async updateRemessa(e,r){try{const o=await this.makeRequest(`${this.baseURL}/remessas/${e}/`,{method:"PUT",body:JSON.stringify(r)});if(!o.ok)throw new Error("Erro ao atualizar remessa");return await o.json()}catch(o){throw console.error("Erro ao atualizar remessa:",o),o}}async deleteRemessa(e){try{if(!(await this.makeRequest(`${this.baseURL}/remessas/${e}/`,{method:"DELETE"})).ok)throw new Error("Erro ao deletar remessa");return!0}catch(r){throw console.error("Erro ao deletar remessa:",r),r}}async gerarRemessa(e){try{const r=await this.makeRequest(`${this.baseURL}/remessas/${e}/gerar/`,{method:"POST"});if(!r.ok)throw new Error("Erro ao gerar remessa");return await r.json()}catch(r){throw console.error("Erro ao gerar remessa:",r),r}}async processarRetorno(e){try{const r=await this.makeRequest(`${this.baseURL}/remessas/${e}/processar-retorno/`,{method:"POST"});if(!r.ok)throw new Error("Erro ao processar retorno");return await r.json()}catch(r){throw console.error("Erro ao processar retorno:",r),r}}async getBancos(){try{const e=await this.makeRequest(`${this.baseURL}/bancos/`);if(!e.ok)throw new Error("Erro ao carregar bancos");return await e.json()}catch(e){return console.error("Erro ao carregar bancos:",e),this.getMockBancos()}}}const c=new s;export{c};
