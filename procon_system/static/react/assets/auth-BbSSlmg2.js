import{d as n,g as i,a as h,r as c}from"./main-CRMJS0Wv.js";const a="http://localhost:8000",u=o=>{try{if(!o){console.warn("[Auth] Dados de token vazios");return}if(typeof o=="object"&&o.access?(localStorage.setItem("procon-auth-token",o.access),o.refresh&&localStorage.setItem("procon-refresh-token",o.refresh),console.log("[Auth] Tokens salvos com sucesso")):typeof o=="string"?(localStorage.setItem("procon-auth-token",o),console.log("[Auth] Token de acesso salvo")):console.error("[Auth] Formato de token inválido:",typeof o),o.access){const e=n(o.access);e&&localStorage.setItem("procon-user-data",JSON.stringify(e))}}catch(e){console.error("[Auth] Erro ao salvar token:",e)}},d=async(o,e)=>{try{console.log("[Auth] Iniciando login para:",o);const s=await fetch(`${a}/auth/token/`,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({username:o,password:e})}),r=await s.json();if(!s.ok){const t=r.detail||r.message||r.error||`Erro ${s.status}: ${s.statusText}`;throw console.error("[Auth] Erro no login:",t),new Error(t)}if(!r.access)throw new Error("Token de acesso não encontrado na resposta");u(r);const l=n(r.access);return console.log("[Auth] Login realizado com sucesso"),{access:r.access,refresh:r.refresh,user:l,...r}}catch(s){throw console.error("[Auth] Erro durante login:",s),s}},f=async(o=!0)=>{try{const e=i(),s=h();if(o&&(e||s))try{await fetch(`${a}/auth/logout/`,{method:"POST",headers:{"Content-Type":"application/json",...e&&{Authorization:`Bearer ${e}`}},body:JSON.stringify({refresh:s})})}catch(r){console.warn("[Auth] Erro ao invalidar token no servidor:",r)}c(),console.log("[Auth] Logout realizado com sucesso")}catch(e){console.error("[Auth] Erro durante logout:",e),c()}};export{d as a,f as l};
