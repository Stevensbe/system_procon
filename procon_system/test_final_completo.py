#!/usr/bin/env python3
"""
üß™ TESTES FINAIS COMPLETOS - SISTEMA PROCON
Testa todas as funcionalidades do sistema de forma abrangente
"""

import os
import sys
import django
import requests
import json
from datetime import datetime, timedelta
from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth.models import User
from django.core.management import execute_from_command_line

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'procon_system.settings')
django.setup()

class TesteFinalSistemaProcon:
    """Classe principal para testes finais do sistema"""
    
    def __init__(self):
        self.client = Client()
        self.base_url = "http://localhost:8000"
        self.test_results = {
            'passed': 0,
            'failed': 0,
            'errors': [],
            'warnings': []
        }
        
    def log_test(self, test_name, status, message=""):
        """Registra resultado do teste"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        if status == "PASS":
            print(f"‚úÖ [{timestamp}] {test_name}: {message}")
            self.test_results['passed'] += 1
        elif status == "FAIL":
            print(f"‚ùå [{timestamp}] {test_name}: {message}")
            self.test_results['failed'] += 1
            self.test_results['errors'].append(f"{test_name}: {message}")
        elif status == "WARN":
            print(f"‚ö†Ô∏è [{timestamp}] {test_name}: {message}")
            self.test_results['warnings'].append(f"{test_name}: {message}")
    
    def test_1_configuracao_django(self):
        """Teste 1: Configura√ß√£o do Django"""
        try:
            from django.conf import settings
            self.log_test("Configura√ß√£o Django", "PASS", "Django configurado corretamente")
            
            # Verificar apps instalados
            required_apps = [
                'fiscalizacao', 'multas', 'financeiro', 'juridico', 
                'protocolo', 'portal_cidadao', 'cobranca', 'notificacoes'
            ]
            
            for app in required_apps:
                if app in settings.INSTALLED_APPS:
                    self.log_test(f"App {app}", "PASS", "Instalado")
                else:
                    self.log_test(f"App {app}", "FAIL", "N√£o encontrado")
                    
        except Exception as e:
            self.log_test("Configura√ß√£o Django", "FAIL", str(e))
    
    def test_2_banco_dados(self):
        """Teste 2: Banco de dados"""
        try:
            from django.db import connection
            cursor = connection.cursor()
            cursor.execute("SELECT 1")
            self.log_test("Conex√£o BD", "PASS", "Banco de dados acess√≠vel")
            
            # Verificar tabelas principais
            tables = ['auth_user', 'fiscalizacao_autoinfracao', 'multas_multa']
            for table in tables:
                try:
                    cursor.execute(f"SELECT COUNT(*) FROM {table}")
                    self.log_test(f"Tabela {table}", "PASS", "Acess√≠vel")
                except:
                    self.log_test(f"Tabela {table}", "WARN", "N√£o encontrada (pode precisar de migra√ß√£o)")
                    
        except Exception as e:
            self.log_test("Banco de dados", "FAIL", str(e))
    
    def test_3_autenticacao(self):
        """Teste 3: Sistema de autentica√ß√£o"""
        try:
            # Criar usu√°rio de teste
            user, created = User.objects.get_or_create(
                username='teste_final',
                defaults={'email': 'teste@procon.am.gov.br'}
            )
            if created:
                user.set_password('teste123')
                user.save()
                self.log_test("Cria√ß√£o usu√°rio", "PASS", "Usu√°rio de teste criado")
            
            # Testar login
            login_success = self.client.login(username='teste_final', password='teste123')
            if login_success:
                self.log_test("Login", "PASS", "Autentica√ß√£o funcionando")
            else:
                self.log_test("Login", "FAIL", "Falha na autentica√ß√£o")
                
        except Exception as e:
            self.log_test("Autentica√ß√£o", "FAIL", str(e))
    
    def test_4_apis_principais(self):
        """Teste 4: APIs principais"""
        try:
            # Testar endpoint de sa√∫de
            response = self.client.get('/health/')
            if response.status_code == 200:
                self.log_test("Health Check", "PASS", "API de sa√∫de funcionando")
            else:
                self.log_test("Health Check", "FAIL", f"Status: {response.status_code}")
            
            # Testar endpoint de teste
            response = self.client.get('/api/test/')
            if response.status_code == 200:
                self.log_test("API Test", "PASS", "Endpoint de teste funcionando")
            else:
                self.log_test("API Test", "FAIL", f"Status: {response.status_code}")
                
        except Exception as e:
            self.log_test("APIs", "FAIL", str(e))
    
    def test_5_modulos_principais(self):
        """Teste 5: M√≥dulos principais"""
        modules = [
            ('fiscalizacao', 'Fiscaliza√ß√£o'),
            ('multas', 'Multas'),
            ('financeiro', 'Financeiro'),
            ('juridico', 'Jur√≠dico'),
            ('cobranca', 'Cobran√ßa'),
            ('notificacoes', 'Notifica√ß√µes'),
            ('portal_cidadao', 'Portal do Cidad√£o')
        ]
        
        for module_name, display_name in modules:
            try:
                # Verificar se o m√≥dulo pode ser importado
                __import__(module_name)
                self.log_test(f"M√≥dulo {display_name}", "PASS", "Import√°vel")
            except ImportError as e:
                self.log_test(f"M√≥dulo {display_name}", "FAIL", f"Erro de importa√ß√£o: {e}")
    
    def test_6_urls_principais(self):
        """Teste 6: URLs principais"""
        urls_to_test = [
            '/admin/',
            '/api/',
            '/dashboard/',
            '/fiscalizacao/',
            '/multas/',
            '/financeiro/',
            '/juridico/',
            '/portal-cidadao/'
        ]
        
        for url in urls_to_test:
            try:
                response = self.client.get(url)
                if response.status_code in [200, 302, 404]:  # 404 √© aceit√°vel para algumas URLs
                    self.log_test(f"URL {url}", "PASS", f"Status: {response.status_code}")
                else:
                    self.log_test(f"URL {url}", "WARN", f"Status inesperado: {response.status_code}")
            except Exception as e:
                self.log_test(f"URL {url}", "FAIL", str(e))
    
    def test_7_frontend_integration(self):
        """Teste 7: Integra√ß√£o com Frontend"""
        try:
            # Verificar se o frontend est√° configurado
            frontend_dir = os.path.join(os.path.dirname(__file__), '..', 'frontend')
            if os.path.exists(frontend_dir):
                self.log_test("Frontend", "PASS", "Diret√≥rio frontend encontrado")
                
                # Verificar package.json
                package_json = os.path.join(frontend_dir, 'package.json')
                if os.path.exists(package_json):
                    self.log_test("Package.json", "PASS", "Arquivo de configura√ß√£o encontrado")
                else:
                    self.log_test("Package.json", "FAIL", "Arquivo n√£o encontrado")
            else:
                self.log_test("Frontend", "FAIL", "Diret√≥rio frontend n√£o encontrado")
                
        except Exception as e:
            self.log_test("Frontend", "FAIL", str(e))
    
    def test_8_servicos_externos(self):
        """Teste 8: Servi√ßos externos"""
        try:
            # Testar conex√£o com Redis (se dispon√≠vel)
            try:
                import redis
                r = redis.Redis(host='localhost', port=6379, db=0)
                r.ping()
                self.log_test("Redis", "PASS", "Conex√£o estabelecida")
            except:
                self.log_test("Redis", "WARN", "N√£o dispon√≠vel (opcional)")
            
            # Testar PostgreSQL (se configurado)
            from django.conf import settings
            if 'postgresql' in settings.DATABASES['default']['ENGINE']:
                self.log_test("PostgreSQL", "PASS", "Configurado como banco principal")
            else:
                self.log_test("PostgreSQL", "WARN", "Usando SQLite (desenvolvimento)")
                
        except Exception as e:
            self.log_test("Servi√ßos externos", "FAIL", str(e))
    
    def test_9_seguranca(self):
        """Teste 9: Configura√ß√µes de seguran√ßa"""
        try:
            from django.conf import settings
            
            # Verificar configura√ß√µes de seguran√ßa
            security_checks = [
                ('SECRET_KEY', settings.SECRET_KEY != 'django-insecure-desenvolvimento-procon-2025-xyz123abc456def789'),
                ('DEBUG', not settings.DEBUG),  # Deve ser False em produ√ß√£o
                ('ALLOWED_HOSTS', len(settings.ALLOWED_HOSTS) > 0),
                ('CORS_ORIGIN_WHITELIST', hasattr(settings, 'CORS_ORIGIN_WHITELIST')),
            ]
            
            for check_name, is_secure in security_checks:
                if is_secure:
                    self.log_test(f"Seguran√ßa {check_name}", "PASS", "Configurado corretamente")
                else:
                    self.log_test(f"Seguran√ßa {check_name}", "WARN", "Necessita aten√ß√£o")
                    
        except Exception as e:
            self.log_test("Seguran√ßa", "FAIL", str(e))
    
    def test_10_performance(self):
        """Teste 10: Performance b√°sica"""
        try:
            import time
            
            # Testar tempo de resposta do Django
            start_time = time.time()
            response = self.client.get('/health/')
            end_time = time.time()
            
            response_time = end_time - start_time
            if response_time < 1.0:  # Menos de 1 segundo
                self.log_test("Performance", "PASS", f"Tempo de resposta: {response_time:.3f}s")
            else:
                self.log_test("Performance", "WARN", f"Tempo de resposta lento: {response_time:.3f}s")
                
        except Exception as e:
            self.log_test("Performance", "FAIL", str(e))
    
    def executar_todos_testes(self):
        """Executa todos os testes"""
        print("üß™ INICIANDO TESTES FINAIS DO SISTEMA PROCON")
        print("=" * 60)
        print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        print("=" * 60)
        
        # Executar todos os testes
        testes = [
            self.test_1_configuracao_django,
            self.test_2_banco_dados,
            self.test_3_autenticacao,
            self.test_4_apis_principais,
            self.test_5_modulos_principais,
            self.test_6_urls_principais,
            self.test_7_frontend_integration,
            self.test_8_servicos_externos,
            self.test_9_seguranca,
            self.test_10_performance
        ]
        
        for teste in testes:
            try:
                teste()
            except Exception as e:
                self.log_test(teste.__name__, "FAIL", f"Erro na execu√ß√£o: {str(e)}")
        
        # Relat√≥rio final
        self.gerar_relatorio_final()
    
    def gerar_relatorio_final(self):
        """Gera relat√≥rio final dos testes"""
        print("\n" + "=" * 60)
        print("üìä RELAT√ìRIO FINAL DOS TESTES")
        print("=" * 60)
        
        total_tests = self.test_results['passed'] + self.test_results['failed']
        
        print(f"‚úÖ Testes Passados: {self.test_results['passed']}")
        print(f"‚ùå Testes Falharam: {self.test_results['failed']}")
        print(f"üìà Taxa de Sucesso: {(self.test_results['passed']/total_tests*100):.1f}%" if total_tests > 0 else "N/A")
        
        if self.test_results['warnings']:
            print(f"\n‚ö†Ô∏è Avisos ({len(self.test_results['warnings'])}):")
            for warning in self.test_results['warnings']:
                print(f"  - {warning}")
        
        if self.test_results['errors']:
            print(f"\n‚ùå Erros ({len(self.test_results['errors'])}):")
            for error in self.test_results['errors']:
                print(f"  - {error}")
        
        # Status geral
        if self.test_results['failed'] == 0:
            print("\nüéâ STATUS: SISTEMA APROVADO PARA PRODU√á√ÉO!")
        elif self.test_results['failed'] <= 2:
            print("\n‚ö†Ô∏è STATUS: SISTEMA APROVADO COM RESERVAS")
        else:
            print("\n‚ùå STATUS: SISTEMA NECESSITA CORRE√á√ïES")
        
        print("=" * 60)

if __name__ == "__main__":
    # Executar testes
    tester = TesteFinalSistemaProcon()
    tester.executar_todos_testes()
