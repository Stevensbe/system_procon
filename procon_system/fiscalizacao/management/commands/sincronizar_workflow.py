"""
SISPROCON - Comando para sincronizar e migrar dados do workflow
Uso: python manage.py sincronizar_workflow
"""

from django.core.management.base import BaseCommand
from django.utils import timezone
from fiscalizacao.workflow_signals import (
    migrar_empresas_de_autos_existentes,
    sincronizar_processos_existentes,
    WorkflowManager
)


class Command(BaseCommand):
    help = 'Sincroniza dados existentes com o novo workflow integrado'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--migrar-empresas',
            action='store_true',
            help='Migra empresas dos autos existentes',
        )
        parser.add_argument(
            '--sincronizar-multas',
            action='store_true',
            help='Cria multas para processos finalizados sem multa',
        )
        parser.add_argument(
            '--relatorio',
            action='store_true',
            help='Exibe relat√≥rio do workflow atual',
        )
        parser.add_argument(
            '--tudo',
            action='store_true',
            help='Executa todas as opera√ß√µes',
        )
    
    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS(
                f'üîÑ SISPROCON - Sincroniza√ß√£o de Workflow iniciada em {timezone.now().strftime("%d/%m/%Y %H:%M:%S")}'
            )
        )
        
        try:
            if options['migrar_empresas'] or options['tudo']:
                self.stdout.write("üè¢ Migrando empresas dos autos existentes...")
                empresas_criadas = migrar_empresas_de_autos_existentes()
                self.stdout.write(
                    self.style.SUCCESS(f"‚úÖ {empresas_criadas} empresas criadas/sincronizadas")
                )
            
            if options['sincronizar_multas'] or options['tudo']:
                self.stdout.write("üí∞ Sincronizando multas de processos finalizados...")
                multas_criadas = sincronizar_processos_existentes()
                self.stdout.write(
                    self.style.SUCCESS(f"‚úÖ {multas_criadas} multas criadas")
                )
            
            if options['relatorio'] or options['tudo']:
                self.stdout.write("üìä Gerando relat√≥rio do workflow...")
                relatorio = WorkflowManager.relatorio_workflow()
                
                self.stdout.write(
                    self.style.SUCCESS(
                        f"""
üìà RELAT√ìRIO DO WORKFLOW SISPROCON:
   
   üìã Autos de Infra√ß√£o: {relatorio['autos_criados']}
   ‚öñÔ∏è  Processos Admin.: {relatorio['processos_criados']}
   üí∞ Multas Geradas: {relatorio['multas_geradas']}
   
   üîÑ Processos Pendentes: {relatorio['processos_pendentes']}
   ‚è∞ Multas Vencidas: {relatorio['multas_vencidas']}
   
   üìä Taxa Convers√£o Auto‚ÜíProcesso: {relatorio['taxa_conversao_auto_processo']:.1f}%
   üìä Taxa Convers√£o Processo‚ÜíMulta: {relatorio['taxa_conversao_processo_multa']:.1f}%
                        """
                    )
                )
            
            if not any([options['migrar_empresas'], options['sincronizar_multas'], 
                       options['relatorio'], options['tudo']]):
                self.stdout.write(
                    self.style.WARNING(
                        "Nenhuma opera√ß√£o especificada. Use --help para ver as op√ß√µes dispon√≠veis."
                    )
                )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro durante sincroniza√ß√£o: {str(e)}')
            )
            raise
        
        self.stdout.write(
            self.style.SUCCESS('üèÅ Sincroniza√ß√£o de workflow conclu√≠da!')
        )