#!/usr/bin/env python
"""
Script para testar o fluxo completo do Portal do Cidad√£o ‚Üí Caixas de Entrada
Verifica se tudo est√° funcionando para o deploy
"""

import os
import sys
import django
from datetime import datetime, timedelta

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'procon_system.settings')
django.setup()

from django.contrib.auth.models import User
from django.contrib.contenttypes.models import ContentType
from portal_cidadao.models import DenunciaCidadao
from peticionamento.models import PeticaoEletronica, TipoPeticao
from caixa_entrada.models import CaixaEntrada, HistoricoCaixaEntrada
from fiscalizacao.models import AutoInfracao
from multas.models import Multa
from juridico.models import ProcessoJuridico

def criar_usuario_teste():
    """Cria usu√°rio para testes"""
    try:
        user, created = User.objects.get_or_create(
            username='teste_deploy',
            defaults={
                'email': 'teste@procon.gov.br',
                'first_name': 'Usu√°rio',
                'last_name': 'Teste',
                'is_staff': True,
                'is_active': True
            }
        )
        if created:
            user.set_password('teste123')
            user.save()
            print(f"‚úÖ Usu√°rio de teste criado: {user.username}")
        else:
            print(f"‚úÖ Usu√°rio de teste j√° existe: {user.username}")
        return user
    except Exception as e:
        print(f"‚ùå Erro ao criar usu√°rio: {e}")
        return None

def testar_denuncia_portal():
    """Testa se den√∫ncia do Portal cai na Caixa de Den√∫ncias"""
    print("\nüîç TESTANDO: Den√∫ncia Portal ‚Üí Caixa de Den√∫ncias")
    
    try:
        # Contar documentos antes
        count_antes = CaixaEntrada.objects.filter(tipo_documento='DENUNCIA').count()
        print(f"üìä Documentos de den√∫ncia antes: {count_antes}")
        
        # Criar den√∫ncia an√¥nima
        denuncia_anonima = DenunciaCidadao.objects.create(
            numero_denuncia=f"DEN-{datetime.now().strftime('%Y%m%d%H%M%S')}-001",
            empresa_denunciada="Empresa Teste An√¥nima",
            cnpj_empresa="12.345.678/0001-90",
            descricao_fatos="Teste de den√∫ncia an√¥nima para deploy",
            denuncia_anonima=True,
            motivo_anonimato="Teste de seguran√ßa",
            endereco_empresa="Rua Teste, 123",
            cidade_empresa="Cidade Teste",
            estado_empresa="SP",
            cep_empresa="01234-567",
            data_ocorrencia=datetime.now().date(),
            ip_origem="127.0.0.1",
            user_agent="Teste Deploy"
        )
        
        # Criar den√∫ncia n√£o an√¥nima
        denuncia_normal = DenunciaCidadao.objects.create(
            numero_denuncia=f"DEN-{datetime.now().strftime('%Y%m%d%H%M%S')}-002",
            empresa_denunciada="Empresa Teste Normal",
            cnpj_empresa="98.765.432/0001-10",
            descricao_fatos="Teste de den√∫ncia normal para deploy",
            denuncia_anonima=False,
            nome_denunciante="Jo√£o da Silva",
            cpf_cnpj="123.456.789-00",
            email="joao@teste.com",
            telefone="(11) 99999-9999",
            endereco_empresa="Rua Teste, 456",
            cidade_empresa="Cidade Teste",
            estado_empresa="SP",
            cep_empresa="01234-567",
            data_ocorrencia=datetime.now().date(),
            ip_origem="127.0.0.1",
            user_agent="Teste Deploy"
        )
        
        # Verificar se documentos foram criados na caixa de entrada
        count_depois = CaixaEntrada.objects.filter(tipo_documento='DENUNCIA').count()
        print(f"üìä Documentos de den√∫ncia depois: {count_depois}")
        
        if count_depois == count_antes + 2:
            print("‚úÖ SUCESSO: 2 den√∫ncias criadas na Caixa de Den√∫ncias")
            
            # Verificar se est√£o na caixa correta
            documentos = CaixaEntrada.objects.filter(tipo_documento='DENUNCIA').order_by('-id')[:2]
            for doc in documentos:
                print(f"   üìÑ {doc.numero_protocolo} - {doc.assunto} ‚Üí {doc.setor_destino}")
                if doc.setor_destino == 'Fiscaliza√ß√£o':
                    print("   ‚úÖ Setor destino correto: Fiscaliza√ß√£o")
                else:
                    print(f"   ‚ùå Setor destino incorreto: {doc.setor_destino}")
            
            return True
        else:
            print(f"‚ùå ERRO: Esperado {count_antes + 2}, encontrado {count_depois}")
            return False
            
    except Exception as e:
        print(f"‚ùå ERRO ao testar den√∫ncias: {e}")
        return False

def testar_peticao_portal():
    """Testa se peti√ß√£o do Portal cai na Caixa Jur√≠dico"""
    print("\nüîç TESTANDO: Peti√ß√£o Portal ‚Üí Caixa Jur√≠dico")
    
    try:
        # Contar documentos antes
        count_antes = CaixaEntrada.objects.filter(tipo_documento='PETICAO').count()
        print(f"üìä Documentos de peti√ß√£o antes: {count_antes}")
        
        # Criar tipo de peti√ß√£o se n√£o existir
        tipo_peticao, created = TipoPeticao.objects.get_or_create(
            nome="Recurso Administrativo",
            defaults={
                'categoria': 'RECURSO',
                'descricao': 'Recurso contra decis√£o administrativa',
                'prazo_resposta': 30,
                'ativo': True
            }
        )
        
        # Criar peti√ß√£o
        peticao = PeticaoEletronica.objects.create(
            numero_peticao=f"PET-{datetime.now().strftime('%Y%m%d%H%M%S')}-001",
            tipo_peticao=tipo_peticao,
            assunto="Teste de peti√ß√£o para deploy",
            descricao="Teste de peti√ß√£o eletr√¥nica para verificar fluxo",
            peticionario_nome="Maria da Silva",
            peticionario_documento="987.654.321-00",
            peticionario_email="maria@teste.com",
            peticionario_telefone="(11) 88888-8888",
            empresa_nome="Empresa Teste Peti√ß√£o",
            empresa_cnpj="11.222.333/0001-44",
            prioridade="NORMAL",
            prazo_resposta=datetime.now().date() + timedelta(days=30),
            origem="PORTAL_CIDADAO",
            ip_origem="127.0.0.1",
            user_agent="Teste Deploy",
            usuario_criacao=User.objects.get(username='teste_deploy')
        )
        
        # Verificar se documento foi criado na caixa de entrada
        count_depois = CaixaEntrada.objects.filter(tipo_documento='PETICAO').count()
        print(f"üìä Documentos de peti√ß√£o depois: {count_depois}")
        
        if count_depois == count_antes + 1:
            print("‚úÖ SUCESSO: 1 peti√ß√£o criada na Caixa de Entrada")
            
            # Verificar se est√° na caixa correta
            documento = CaixaEntrada.objects.filter(tipo_documento='PETICAO').order_by('-id').first()
            print(f"   üìÑ {documento.numero_protocolo} - {documento.assunto} ‚Üí {documento.setor_destino}")
            if documento.setor_destino == 'Jur√≠dico':
                print("   ‚úÖ Setor destino correto: Jur√≠dico")
                return True
            else:
                print(f"   ‚ùå Setor destino incorreto: {documento.setor_destino}")
                return False
        else:
            print(f"‚ùå ERRO: Esperado {count_antes + 1}, encontrado {count_depois}")
            return False
            
    except Exception as e:
        print(f"‚ùå ERRO ao testar peti√ß√µes: {e}")
        return False

def testar_tramitacao_documentos():
    """Testa se tramita√ß√£o entre setores funciona"""
    print("\nüîç TESTANDO: Tramita√ß√£o entre Setores")
    
    try:
        # Pegar um documento de den√∫ncia
        documento = CaixaEntrada.objects.filter(tipo_documento='DENUNCIA').first()
        if not documento:
            print("‚ùå Nenhum documento de den√∫ncia encontrado para testar tramita√ß√£o")
            return False
        
        print(f"üìÑ Testando tramita√ß√£o do documento: {documento.numero_protocolo}")
        print(f"   Setor atual: {documento.setor_destino}")
        
        # Simular tramita√ß√£o para Jur√≠dico
        documento.setor_destino = 'Jur√≠dico'
        documento.status = 'TRAMITADO'
        documento.save()
        
        # Registrar no hist√≥rico
        HistoricoCaixaEntrada.objects.create(
            documento=documento,
            acao='TRAMITADO',
            detalhes='Documento tramitado de Fiscaliza√ß√£o para Jur√≠dico para an√°lise legal',
            usuario_responsavel=User.objects.get(username='teste_deploy')
        )
        
        print(f"   ‚úÖ Documento tramitado para: {documento.setor_destino}")
        print(f"   ‚úÖ Status atualizado para: {documento.status}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO ao testar tramita√ß√£o: {e}")
        return False

def verificar_configuracoes_deploy():
    """Verifica configura√ß√µes necess√°rias para deploy"""
    print("\nüîç VERIFICANDO: Configura√ß√µes para Deploy")
    
    configuracoes_ok = True
    
    # Verificar vari√°veis de ambiente cr√≠ticas
    from django.conf import settings
    
    print("üìã Configura√ß√µes Django:")
    print(f"   DEBUG: {settings.DEBUG}")
    print(f"   SECRET_KEY configurado: {'‚úÖ' if settings.SECRET_KEY else '‚ùå'}")
    print(f"   ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}")
    
    if settings.DEBUG:
        print("   ‚ö†Ô∏è  ATEN√á√ÉO: DEBUG=True em produ√ß√£o √© inseguro!")
        configuracoes_ok = False
    
    # Verificar banco de dados
    from django.db import connection
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
        print("   ‚úÖ Conex√£o com banco de dados: OK")
    except Exception as e:
        print(f"   ‚ùå Erro na conex√£o com banco: {e}")
        configuracoes_ok = False
    
    # Verificar Redis
    try:
        import redis
        r = redis.Redis.from_url(settings.REDIS_URL)
        r.ping()
        print("   ‚úÖ Conex√£o com Redis: OK")
    except Exception as e:
        print(f"   ‚ùå Erro na conex√£o com Redis: {e}")
        configuracoes_ok = False
    
    return configuracoes_ok

def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ TESTE COMPLETO PARA DEPLOY - SYSTEM PROCON")
    print("=" * 60)
    
    # Criar usu√°rio de teste
    user = criar_usuario_teste()
    if not user:
        print("‚ùå N√£o foi poss√≠vel criar usu√°rio de teste. Abortando.")
        return
    
    # Executar testes
    testes = [
        ("Den√∫ncia Portal ‚Üí Caixa Den√∫ncias", testar_denuncia_portal),
        ("Peti√ß√£o Portal ‚Üí Caixa Jur√≠dico", testar_peticao_portal),
        ("Tramita√ß√£o entre Setores", testar_tramitacao_documentos),
        ("Configura√ß√µes Deploy", verificar_configuracoes_deploy)
    ]
    
    resultados = []
    for nome, funcao in testes:
        try:
            resultado = funcao()
            resultados.append((nome, resultado))
        except Exception as e:
            print(f"‚ùå ERRO CR√çTICO em {nome}: {e}")
            resultados.append((nome, False))
    
    # Resumo final
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES:")
    print("=" * 60)
    
    sucessos = 0
    for nome, resultado in resultados:
        status = "‚úÖ PASSOU" if resultado else "‚ùå FALHOU"
        print(f"{status} - {nome}")
        if resultado:
            sucessos += 1
    
    print(f"\nüéØ RESULTADO FINAL: {sucessos}/{len(resultados)} testes passaram")
    
    if sucessos == len(resultados):
        print("üéâ SISTEMA PRONTO PARA DEPLOY!")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Configurar vari√°veis de ambiente em produ√ß√£o")
        print("2. Executar migra√ß√µes: python manage.py migrate")
        print("3. Coletar arquivos est√°ticos: python manage.py collectstatic")
        print("4. Configurar servidor web (Nginx/Apache)")
        print("5. Configurar SSL/HTTPS")
        print("6. Configurar backup autom√°tico")
        print("7. Configurar monitoramento (Prometheus/Grafana)")
    else:
        print("‚ö†Ô∏è  SISTEMA N√ÉO EST√Å PRONTO PARA DEPLOY!")
        print("Corrija os problemas identificados antes de fazer deploy.")

if __name__ == "__main__":
    main()
