#!/usr/bin/env python
"""
Script para testar as funcionalidades avan√ßadas de fiscaliza√ß√£o
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'procon_system.settings')
django.setup()

from django.contrib.auth.models import User
from fiscalizacao.models import (
    TipoFiscalizacao, EvidenciaFiscalizacao, AutoInfracaoAvancado,
    HistoricoAutoInfracao, TemplateAutoInfracao, NotificacaoEletronica,
    ConfiguracaoFiscalizacao, AutoInfracao
)


def verificar_dados():
    """Verificar dados no banco"""
    print("üîç VERIFICANDO DADOS NO BANCO")
    print("-" * 40)
    
    # Verificar modelos b√°sicos
    total_autos = AutoInfracao.objects.count()
    print(f"‚úÖ Autos de infra√ß√£o: {total_autos}")
    
    # Verificar modelos avan√ßados
    total_tipos = TipoFiscalizacao.objects.count()
    print(f"‚úÖ Tipos de fiscaliza√ß√£o: {total_tipos}")
    
    total_templates = TemplateAutoInfracao.objects.count()
    print(f"‚úÖ Templates: {total_templates}")
    
    total_autos_avancados = AutoInfracaoAvancado.objects.count()
    print(f"‚úÖ Autos avan√ßados: {total_autos_avancados}")
    
    total_evidencias = EvidenciaFiscalizacao.objects.count()
    print(f"‚úÖ Evid√™ncias: {total_evidencias}")
    
    total_historicos = HistoricoAutoInfracao.objects.count()
    print(f"‚úÖ Hist√≥ricos: {total_historicos}")
    
    total_notificacoes = NotificacaoEletronica.objects.count()
    print(f"‚úÖ Notifica√ß√µes: {total_notificacoes}")
    
    total_configuracoes = ConfiguracaoFiscalizacao.objects.count()
    print(f"‚úÖ Configura√ß√µes: {total_configuracoes}")


def testar_funcionalidades():
    """Testar funcionalidades espec√≠ficas"""
    print("\nüß™ TESTANDO FUNCIONALIDADES")
    print("-" * 40)
    
    # Testar auto avan√ßado
    try:
        auto_avancado = AutoInfracaoAvancado.objects.first()
        if auto_avancado:
            print(f"‚úÖ Auto avan√ßado encontrado: {auto_avancado.auto_infracao.numero}")
            print(f"   ‚Ä¢ Status workflow: {auto_avancado.status_workflow}")
            print(f"   ‚Ä¢ Gerado automaticamente: {auto_avancado.gerado_automaticamente}")
            print(f"   ‚Ä¢ Assinatura digital: {auto_avancado.assinatura_digital}")
            print(f"   ‚Ä¢ Notifica√ß√£o eletr√¥nica: {auto_avancado.notificacao_eletronica}")
        else:
            print("‚ö†Ô∏è Nenhum auto avan√ßado encontrado")
    except Exception as e:
        print(f"‚ùå Erro ao testar auto avan√ßado: {e}")
    
    # Testar template
    try:
        template = TemplateAutoInfracao.objects.first()
        if template:
            print(f"‚úÖ Template encontrado: {template.nome}")
            print(f"   ‚Ä¢ Tipo: {template.tipo_fiscalizacao.nome}")
            print(f"   ‚Ä¢ Padr√£o: {template.padrao}")
            print(f"   ‚Ä¢ Valor padr√£o: R$ {template.valor_multa_padrao}")
        else:
            print("‚ö†Ô∏è Nenhum template encontrado")
    except Exception as e:
        print(f"‚ùå Erro ao testar template: {e}")
    
    # Testar evid√™ncia
    try:
        evidencia = EvidenciaFiscalizacao.objects.first()
        if evidencia:
            print(f"‚úÖ Evid√™ncia encontrada: {evidencia.titulo}")
            print(f"   ‚Ä¢ Tipo: {evidencia.tipo}")
            print(f"   ‚Ä¢ Auto: {evidencia.auto_infracao.numero}")
            print(f"   ‚Ä¢ Upload por: {evidencia.upload_por.username}")
        else:
            print("‚ö†Ô∏è Nenhuma evid√™ncia encontrada")
    except Exception as e:
        print(f"‚ùå Erro ao testar evid√™ncia: {e}")


def main():
    """Fun√ß√£o principal"""
    print("üöÄ TESTANDO M√ìDULO DE FISCALIZA√á√ÉO AVAN√áADO")
    print("=" * 70)
    print(f"‚è∞ {django.utils.timezone.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 70)
    
    try:
        verificar_dados()
        testar_funcionalidades()
        
        print("\n" + "=" * 70)
        print("‚úÖ TESTES CONCLU√çDOS!")
        print("=" * 70)
        print("üéØ M√≥dulo de fiscaliza√ß√£o avan√ßado est√° funcionando!")
        
        print("\nüìã Pr√≥ximos passos:")
        print("   1. Implementar frontend para fiscaliza√ß√£o avan√ßada")
        print("   2. Implementar gera√ß√£o real de autos")
        print("   3. Implementar sistema de assinatura digital")
        print("   4. Implementar notifica√ß√µes em tempo real")
        print("   5. Implementar upload de arquivos")
        
    except Exception as e:
        print(f"\n‚ùå ERRO: {str(e)}")
        import traceback
        traceback.print_exc()


if __name__ == '__main__':
    main()
