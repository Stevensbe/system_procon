#!/usr/bin/env python
"""
Script para criar dados de teste para o m√≥dulo de notifica√ß√µes
"""
import os
import sys
import django
from datetime import datetime, timedelta
import random

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'procon_system.settings')
django.setup()

from django.contrib.auth.models import User
from notificacoes.models import (
    TipoNotificacao, Notificacao, PreferenciaNotificacao, 
    LogNotificacao, TemplateNotificacao
)
from notificacoes.services import notificacao_service

def criar_tipos_notificacao():
    """Cria tipos de notifica√ß√£o"""
    print("üîß Criando tipos de notifica√ß√£o...")
    
    tipos = [
        {
            'nome': 'Prazo Vencendo',
            'codigo': 'PRAZO_VENCENDO',
            'descricao': 'Notifica√ß√£o quando um prazo est√° pr√≥ximo de vencer',
            'template_email': 'Ol√° {{usuario}}, o prazo para {{objeto}} vence em {{dias}} dias.',
            'template_sms': 'Prazo vencendo: {{objeto}} - {{dias}} dias restantes',
            'template_push': 'Prazo vencendo: {{objeto}}'
        },
        {
            'nome': 'Nova Peti√ß√£o',
            'codigo': 'NOVA_PETICAO',
            'descricao': 'Notifica√ß√£o quando uma nova peti√ß√£o √© protocolada',
            'template_email': 'Nova peti√ß√£o protocolada: {{numero_protocolo}} - {{assunto}}',
            'template_sms': 'Nova peti√ß√£o: {{numero_protocolo}}',
            'template_push': 'Nova peti√ß√£o recebida'
        },
        {
            'nome': 'Recurso Protocolado',
            'codigo': 'RECURSO_PROTOCOLADO',
            'descricao': 'Notifica√ß√£o quando um recurso √© protocolado',
            'template_email': 'Recurso protocolado: {{numero_protocolo}} - {{tipo_recurso}}',
            'template_sms': 'Recurso: {{numero_protocolo}}',
            'template_push': 'Recurso protocolado'
        },
        {
            'nome': 'Auto de Infra√ß√£o',
            'codigo': 'AUTO_INFRACAO',
            'descricao': 'Notifica√ß√£o sobre autos de infra√ß√£o',
            'template_email': 'Auto de infra√ß√£o: {{numero_auto}} - {{empresa}}',
            'template_sms': 'Auto: {{numero_auto}}',
            'template_push': 'Auto de infra√ß√£o gerado'
        },
        {
            'nome': 'Decis√£o Tomada',
            'codigo': 'DECISAO_TOMADA',
            'descricao': 'Notifica√ß√£o quando uma decis√£o √© tomada',
            'template_email': 'Decis√£o tomada: {{processo}} - {{decisao}}',
            'template_sms': 'Decis√£o: {{decisao}}',
            'template_push': 'Decis√£o tomada'
        },
        {
            'nome': 'Sistema',
            'codigo': 'SISTEMA',
            'descricao': 'Notifica√ß√µes do sistema',
            'template_email': 'Notifica√ß√£o do sistema: {{mensagem}}',
            'template_sms': 'Sistema: {{mensagem}}',
            'template_push': 'Notifica√ß√£o do sistema'
        }
    ]
    
    tipos_criados = []
    for tipo_data in tipos:
        tipo, created = TipoNotificacao.objects.get_or_create(
            codigo=tipo_data['codigo'],
            defaults=tipo_data
        )
        if created:
            print(f"‚úÖ Tipo criado: {tipo.nome}")
        else:
            print(f"‚úÖ Tipo j√° existe: {tipo.nome}")
        tipos_criados.append(tipo)
    
    return tipos_criados

def criar_templates_notificacao(tipos_notificacao):
    """Cria templates de notifica√ß√£o"""
    print("\nüîß Criando templates de notifica√ß√£o...")
    
    for tipo in tipos_notificacao:
        # Template de email
        TemplateNotificacao.objects.get_or_create(
            tipo_notificacao=tipo,
            canal='email',
            defaults={
                'nome': f'Template Email - {tipo.nome}',
                'assunto': f'PROCON - {tipo.nome}',
                'conteudo': tipo.template_email,
                'variaveis': ['usuario', 'objeto', 'dias', 'numero_protocolo', 'assunto', 'numero_auto', 'empresa', 'processo', 'decisao', 'mensagem']
            }
        )
        
        # Template de SMS
        TemplateNotificacao.objects.get_or_create(
            tipo_notificacao=tipo,
            canal='sms',
            defaults={
                'nome': f'Template SMS - {tipo.nome}',
                'assunto': '',
                'conteudo': tipo.template_sms,
                'variaveis': ['objeto', 'dias', 'numero_protocolo', 'numero_auto', 'decisao', 'mensagem']
            }
        )
        
        # Template de Push
        TemplateNotificacao.objects.get_or_create(
            tipo_notificacao=tipo,
            canal='push',
            defaults={
                'nome': f'Template Push - {tipo.nome}',
                'assunto': '',
                'conteudo': tipo.template_push,
                'variaveis': ['objeto', 'numero_protocolo', 'numero_auto', 'decisao', 'mensagem']
            }
        )
    
    print(f"‚úÖ Templates criados para {len(tipos_notificacao)} tipos")

def criar_preferencias_usuarios(usuarios, tipos_notificacao):
    """Cria prefer√™ncias de notifica√ß√£o para usu√°rios"""
    print("\nüîß Criando prefer√™ncias de usu√°rios...")
    
    canais = ['email', 'sms', 'push', 'sistema']
    
    for usuario in usuarios:
        for tipo in tipos_notificacao:
            # Escolher canais aleatoriamente para cada usu√°rio
            canais_ativos = random.sample(canais, random.randint(1, 3))
            
            for canal in canais_ativos:
                PreferenciaNotificacao.objects.get_or_create(
                    usuario=usuario,
                    tipo_notificacao=tipo,
                    canal=canal,
                    defaults={'ativo': True}
                )
    
    print(f"‚úÖ Prefer√™ncias criadas para {len(usuarios)} usu√°rios")

def criar_notificacoes_teste(usuarios, tipos_notificacao):
    """Cria notifica√ß√µes de teste"""
    print("\nüîß Criando notifica√ß√µes de teste...")
    
    titulos = [
        'Prazo de defesa vencendo',
        'Nova peti√ß√£o protocolada',
        'Recurso administrativo recebido',
        'Auto de infra√ß√£o gerado',
        'Decis√£o tomada sobre processo',
        'Manuten√ß√£o do sistema programada',
        'Relat√≥rio mensal dispon√≠vel',
        'Alerta de seguran√ßa',
        'Backup realizado com sucesso',
        'Nova funcionalidade dispon√≠vel'
    ]
    
    mensagens = [
        'O prazo para apresenta√ß√£o de defesa vence em 3 dias.',
        'Uma nova peti√ß√£o foi protocolada e aguarda an√°lise.',
        'Um recurso administrativo foi protocolado contra decis√£o anterior.',
        'Auto de infra√ß√£o foi gerado para empresa em fiscaliza√ß√£o.',
        'Decis√£o foi tomada sobre processo administrativo.',
        'O sistema ficar√° indispon√≠vel para manuten√ß√£o.',
        'Relat√≥rio mensal de atividades est√° dispon√≠vel para download.',
        'Alerta de seguran√ßa: verifique suas credenciais.',
        'Backup autom√°tico foi realizado com sucesso.',
        'Nova funcionalidade foi implementada no sistema.'
    ]
    
    prioridades = ['baixa', 'normal', 'alta', 'urgente']
    status_choices = ['pendente', 'enviada', 'lida', 'falhada']
    
    notificacoes_criadas = []
    
    for i in range(50):  # Criar 50 notifica√ß√µes
        usuario = random.choice(usuarios)
        tipo = random.choice(tipos_notificacao)
        titulo = random.choice(titulos)
        mensagem = random.choice(mensagens)
        prioridade = random.choice(prioridades)
        status = random.choice(status_choices)
        
        # Gerar data aleat√≥ria nos √∫ltimos 30 dias
        data_criacao = datetime.now() - timedelta(days=random.randint(0, 30))
        
        # Dados extras aleat√≥rios
        dados_extras = {
            'processo_id': f'PROC-{random.randint(1000, 9999)}',
            'empresa': f'Empresa {random.randint(1, 100)}',
            'valor': f'R$ {random.randint(100, 10000)}',
            'prazo_dias': random.randint(1, 30)
        }
        
        notificacao = Notificacao.objects.create(
            tipo=tipo,
            destinatario=usuario,
            titulo=titulo,
            mensagem=mensagem,
            dados_extras=dados_extras,
            prioridade=prioridade,
            status=status,
            criado_em=data_criacao
        )
        
        # Definir data de envio se foi enviada
        if status in ['enviada', 'lida']:
            notificacao.enviada_em = data_criacao + timedelta(minutes=random.randint(1, 60))
            notificacao.save()
        
        # Definir data de leitura se foi lida
        if status == 'lida':
            notificacao.lida_em = notificacao.enviada_em + timedelta(hours=random.randint(1, 24))
            notificacao.save()
        
        notificacoes_criadas.append(notificacao)
        
        if (i + 1) % 10 == 0:
            print(f"‚úÖ {i + 1} notifica√ß√µes criadas")
    
    return notificacoes_criadas

def criar_logs_notificacao(notificacoes):
    """Cria logs de notifica√ß√£o"""
    print("\nüîß Criando logs de notifica√ß√£o...")
    
    canais = ['email', 'sms', 'push', 'sistema']
    resultados = ['sucesso', 'falha', 'pendente']
    
    for notificacao in notificacoes:
        # Criar 1-3 logs por notifica√ß√£o
        num_logs = random.randint(1, 3)
        canais_usados = random.sample(canais, num_logs)
        
        for canal in canais_usados:
            resultado = random.choice(resultados)
            tentativas = random.randint(1, 3) if resultado == 'falha' else 1
            mensagem_erro = f"Erro no envio via {canal}" if resultado == 'falha' else ""
            
            LogNotificacao.objects.create(
                notificacao=notificacao,
                canal=canal,
                resultado=resultado,
                mensagem_erro=mensagem_erro,
                tentativas=tentativas
            )
    
    print(f"‚úÖ Logs criados para {len(notificacoes)} notifica√ß√µes")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Criando dados de teste para o m√≥dulo de notifica√ß√µes...")
    print("=" * 60)
    
    # Obter usu√°rios existentes
    usuarios = list(User.objects.all())
    if not usuarios:
        print("‚ùå Nenhum usu√°rio encontrado. Crie usu√°rios primeiro.")
        return
    
    # Criar tipos de notifica√ß√£o
    tipos_notificacao = criar_tipos_notificacao()
    
    # Criar templates
    criar_templates_notificacao(tipos_notificacao)
    
    # Criar prefer√™ncias de usu√°rios
    criar_preferencias_usuarios(usuarios, tipos_notificacao)
    
    # Criar notifica√ß√µes de teste
    notificacoes = criar_notificacoes_teste(usuarios, tipos_notificacao)
    
    # Criar logs de notifica√ß√£o
    criar_logs_notificacao(notificacoes)
    
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS DADOS CRIADOS:")
    print(f"   - Tipos de Notifica√ß√£o: {TipoNotificacao.objects.count()}")
    print(f"   - Templates: {TemplateNotificacao.objects.count()}")
    print(f"   - Prefer√™ncias: {PreferenciaNotificacao.objects.count()}")
    print(f"   - Notifica√ß√µes: {Notificacao.objects.count()}")
    print(f"   - Logs: {LogNotificacao.objects.count()}")
    print("\nüéâ Dados de teste criados com sucesso!")
    print("\nüí° Para processar notifica√ß√µes pendentes, execute:")
    print("   python manage.py processar_notificacoes")

if __name__ == '__main__':
    main()
