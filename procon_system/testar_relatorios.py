#!/usr/bin/env python
"""
Script para testar o m√≥dulo de Relat√≥rios Avan√ßados
"""

import os
import sys
import django
import requests
import json
from datetime import datetime

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'procon_system.settings')
django.setup()

from django.contrib.auth.models import User
from relatorios.models import (
    TipoRelatorio, Relatorio, RelatorioAgendado, TemplateRelatorio,
    FiltroRelatorio, RelatorioCompartilhado, HistoricoRelatorio, ConfiguracaoRelatorio
)


def verificar_dados_banco():
    """Verificar se os dados foram criados no banco"""
    print("üîç VERIFICANDO DADOS NO BANCO")
    print("-" * 40)
    
    try:
        # Verificar tipos de relat√≥rio
        tipos = TipoRelatorio.objects.all()
        print(f"‚úÖ Tipos de relat√≥rio: {tipos.count()}")
        
        # Verificar relat√≥rios
        relatorios = Relatorio.objects.all()
        print(f"‚úÖ Relat√≥rios: {relatorios.count()}")
        
        # Verificar agendamentos
        agendamentos = RelatorioAgendado.objects.all()
        print(f"‚úÖ Agendamentos: {agendamentos.count()}")
        
        # Verificar templates
        templates = TemplateRelatorio.objects.all()
        print(f"‚úÖ Templates: {templates.count()}")
        
        # Verificar filtros
        filtros = FiltroRelatorio.objects.all()
        print(f"‚úÖ Filtros: {filtros.count()}")
        
        # Verificar compartilhamentos
        compartilhamentos = RelatorioCompartilhado.objects.all()
        print(f"‚úÖ Compartilhamentos: {compartilhamentos.count()}")
        
        # Verificar hist√≥rico
        historicos = HistoricoRelatorio.objects.all()
        print(f"‚úÖ Hist√≥ricos: {historicos.count()}")
        
        # Verificar configura√ß√£o
        configuracao = ConfiguracaoRelatorio.objects.first()
        print(f"‚úÖ Configura√ß√£o: {'Sim' if configuracao else 'N√£o'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar dados: {e}")
        return False


def testar_api_tipos():
    """Testar API de tipos de relat√≥rio"""
    print("\nüåê TESTANDO API - TIPOS DE RELAT√ìRIO")
    print("-" * 40)
    
    try:
        # Listar tipos
        response = requests.get("http://localhost:8000/relatorios/api/tipos/")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Lista de tipos: {len(data['results'])} tipos encontrados")
            
            # Mostrar alguns tipos
            for tipo in data['results'][:3]:
                print(f"   ‚Ä¢ {tipo['nome']} ({tipo['modulo']})")
        else:
            print(f"‚ùå Erro ao listar tipos: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar API de tipos: {e}")


def testar_api_relatorios():
    """Testar API de relat√≥rios"""
    print("\nüåê TESTANDO API - RELAT√ìRIOS")
    print("-" * 40)
    
    try:
        # Listar relat√≥rios
        response = requests.get("http://localhost:8000/relatorios/api/relatorios/")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Lista de relat√≥rios: {len(data['results'])} relat√≥rios encontrados")
            
            # Mostrar alguns relat√≥rios
            for relatorio in data['results'][:3]:
                print(f"   ‚Ä¢ {relatorio['titulo']} ({relatorio['status']})")
        else:
            print(f"‚ùå Erro ao listar relat√≥rios: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar API de relat√≥rios: {e}")


def testar_api_dashboard():
    """Testar API do dashboard"""
    print("\nüåê TESTANDO API - DASHBOARD")
    print("-" * 40)
    
    try:
        response = requests.get("http://localhost:8000/relatorios/api/dashboard/")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Dashboard carregado:")
            print(f"   ‚Ä¢ Total de relat√≥rios: {data['total_relatorios']}")
            print(f"   ‚Ä¢ Pendentes: {data['relatorios_pendentes']}")
            print(f"   ‚Ä¢ Conclu√≠dos: {data['relatorios_concluidos']}")
            print(f"   ‚Ä¢ Com erro: {data['relatorios_erro']}")
            print(f"   ‚Ä¢ Agendados: {data['relatorios_agendados']}")
        else:
            print(f"‚ùå Erro ao carregar dashboard: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar dashboard: {e}")


def testar_api_agendamentos():
    """Testar API de agendamentos"""
    print("\nüåê TESTANDO API - AGENDAMENTOS")
    print("-" * 40)
    
    try:
        response = requests.get("http://localhost:8000/relatorios/api/agendados/")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Lista de agendamentos: {len(data['results'])} agendamentos encontrados")
            
            # Mostrar alguns agendamentos
            for agendamento in data['results'][:3]:
                print(f"   ‚Ä¢ {agendamento['nome']} ({agendamento['frequencia']})")
        else:
            print(f"‚ùå Erro ao listar agendamentos: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar API de agendamentos: {e}")


def testar_api_templates():
    """Testar API de templates"""
    print("\nüåê TESTANDO API - TEMPLATES")
    print("-" * 40)
    
    try:
        response = requests.get("http://localhost:8000/relatorios/api/templates/")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Lista de templates: {len(data['results'])} templates encontrados")
            
            # Mostrar alguns templates
            for template in data['results'][:3]:
                print(f"   ‚Ä¢ {template['nome']} ({'Padr√£o' if template['padrao'] else 'Personalizado'})")
        else:
            print(f"‚ùå Erro ao listar templates: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar API de templates: {e}")


def testar_api_filtros():
    """Testar API de filtros"""
    print("\nüåê TESTANDO API - FILTROS")
    print("-" * 40)
    
    try:
        response = requests.get("http://localhost:8000/relatorios/api/filtros/")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Lista de filtros: {len(data['results'])} filtros encontrados")
            
            # Mostrar alguns filtros
            for filtro in data['results'][:3]:
                print(f"   ‚Ä¢ {filtro['nome']} ({filtro['tipo_filtro']})")
        else:
            print(f"‚ùå Erro ao listar filtros: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar API de filtros: {e}")


def testar_api_compartilhamentos():
    """Testar API de compartilhamentos"""
    print("\nüåê TESTANDO API - COMPARTILHAMENTOS")
    print("-" * 40)
    
    try:
        response = requests.get("http://localhost:8000/relatorios/api/compartilhados/")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Lista de compartilhamentos: {len(data['results'])} compartilhamentos encontrados")
            
            # Mostrar alguns compartilhamentos
            for compartilhamento in data['results'][:3]:
                print(f"   ‚Ä¢ {compartilhamento['relatorio']['titulo']} -> {compartilhamento['compartilhado_com']['username']}")
        else:
            print(f"‚ùå Erro ao listar compartilhamentos: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar API de compartilhamentos: {e}")


def testar_api_historico():
    """Testar API de hist√≥rico"""
    print("\nüåê TESTANDO API - HIST√ìRICO")
    print("-" * 40)
    
    try:
        response = requests.get("http://localhost:8000/relatorios/api/historico/")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Lista de hist√≥rico: {len(data['results'])} registros encontrados")
            
            # Mostrar alguns registros
            for historico in data['results'][:3]:
                print(f"   ‚Ä¢ {historico['relatorio']['titulo']} ({historico['status']})")
        else:
            print(f"‚ùå Erro ao listar hist√≥rico: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar API de hist√≥rico: {e}")


def testar_api_configuracao():
    """Testar API de configura√ß√£o"""
    print("\nüåê TESTANDO API - CONFIGURA√á√ÉO")
    print("-" * 40)
    
    try:
        response = requests.get("http://localhost:8000/relatorios/api/configuracoes/")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Configura√ß√£o carregada:")
            print(f"   ‚Ä¢ Max relat√≥rios por usu√°rio: {data['results'][0]['max_relatorios_por_usuario']}")
            print(f"   ‚Ä¢ Max tamanho arquivo: {data['results'][0]['max_tamanho_arquivo']} MB")
            print(f"   ‚Ä¢ Tempo max processamento: {data['results'][0]['tempo_maximo_processamento']} min")
        else:
            print(f"‚ùå Erro ao carregar configura√ß√£o: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar API de configura√ß√£o: {e}")


def main():
    """Fun√ß√£o principal"""
    print("üöÄ TESTANDO M√ìDULO DE RELAT√ìRIOS AVAN√áADOS")
    print("=" * 70)
    print(f"‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 70)
    
    try:
        if not verificar_dados_banco():
            print("‚ùå Falha ao verificar dados no banco")
            return False
        
        print("\nüåê TESTANDO APIs (requer servidor rodando)")
        print("=" * 70)
        
        try:
            response = requests.get("http://localhost:8000/", timeout=2)
            if response.status_code == 200:
                print("‚úÖ Servidor Django est√° rodando")
                testar_api_tipos()
                testar_api_relatorios()
                testar_api_dashboard()
                testar_api_agendamentos()
                testar_api_templates()
                testar_api_filtros()
                testar_api_compartilhamentos()
                testar_api_historico()
                testar_api_configuracao()
            else:
                print("‚ö†Ô∏è Servidor n√£o est√° respondendo corretamente")
        except requests.exceptions.ConnectionError:
            print("‚ö†Ô∏è Servidor Django n√£o est√° rodando")
            print("   Execute: python manage.py runserver")
            print("   Depois execute este script novamente")
        except Exception as e:
            print(f"‚ùå Erro ao testar APIs: {e}")
        
        print("\n" + "=" * 70)
        print("‚úÖ TESTES CONCLU√çDOS!")
        print("=" * 70)
        print("üéØ M√≥dulo de relat√≥rios avan√ßados est√° funcionando!")
        print("\nüìã Pr√≥ximos passos:")
        print("   1. Implementar frontend para relat√≥rios")
        print("   2. Implementar gera√ß√£o real de relat√≥rios")
        print("   3. Implementar sistema de notifica√ß√µes")
        print("   4. Implementar upload de arquivos")
        print("   5. Implementar assinatura digital")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
