#!/usr/bin/env python
"""
Comando para processar notifica√ß√µes pendentes
"""
from django.core.management.base import BaseCommand
from django.utils import timezone
from notificacoes.services import notificacao_service, configuracao_service


class Command(BaseCommand):
    help = 'Processa notifica√ß√µes pendentes e envia por todos os canais configurados'

    def add_arguments(self, parser):
        parser.add_argument(
            '--limpar-antigas',
            action='store_true',
            help='Remove notifica√ß√µes antigas (mais de 90 dias)',
        )
        parser.add_argument(
            '--dias',
            type=int,
            default=90,
            help='N√∫mero de dias para considerar notifica√ß√£o antiga (padr√£o: 90)',
        )
        parser.add_argument(
            '--estatisticas',
            action='store_true',
            help='Mostra estat√≠sticas de notifica√ß√µes',
        )

    def handle(self, *args, **options):
        self.stdout.write(
            self.style.SUCCESS('üöÄ Iniciando processamento de notifica√ß√µes...')
        )

        # Processar notifica√ß√µes pendentes
        self.processar_notificacoes_pendentes()

        # Limpar notifica√ß√µes antigas se solicitado
        if options['limpar_antigas']:
            self.limpar_notificacoes_antigas(options['dias'])

        # Mostrar estat√≠sticas se solicitado
        if options['estatisticas']:
            self.mostrar_estatisticas()

        self.stdout.write(
            self.style.SUCCESS('‚úÖ Processamento de notifica√ß√µes conclu√≠do!')
        )

    def processar_notificacoes_pendentes(self):
        """Processa notifica√ß√µes pendentes"""
        self.stdout.write('üìß Processando notifica√ß√µes pendentes...')
        
        try:
            notificacao_service.processar_notificacoes_pendentes()
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Notifica√ß√µes pendentes processadas com sucesso!')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro ao processar notifica√ß√µes: {e}')
            )

    def limpar_notificacoes_antigas(self, dias):
        """Remove notifica√ß√µes antigas"""
        self.stdout.write(f'üßπ Removendo notifica√ß√µes com mais de {dias} dias...')
        
        try:
            count = configuracao_service.limpar_notificacoes_antigas(dias)
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ {count} notifica√ß√µes antigas removidas!')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro ao limpar notifica√ß√µes antigas: {e}')
            )

    def mostrar_estatisticas(self):
        """Mostra estat√≠sticas de notifica√ß√µes"""
        self.stdout.write('üìä Estat√≠sticas de notifica√ß√µes:')
        
        try:
            stats = configuracao_service.obter_estatisticas_notificacoes()
            
            self.stdout.write(f'   Total: {stats["total"]}')
            self.stdout.write(f'   Enviadas: {stats["enviadas"]}')
            self.stdout.write(f'   Lidas: {stats["lidas"]}')
            self.stdout.write(f'   Pendentes: {stats["pendentes"]}')
            self.stdout.write(f'   Falhadas: {stats["falhadas"]}')
            
            self.stdout.write('\n   Por Prioridade:')
            for prioridade, count in stats['por_prioridade'].items():
                self.stdout.write(f'     {prioridade.title()}: {count}')
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro ao obter estat√≠sticas: {e}')
            )
