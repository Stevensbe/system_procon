#!/usr/bin/env python
"""
Script para testar o m√≥dulo de notifica√ß√µes
"""
import os
import sys
import django
from datetime import datetime, timedelta

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'procon_system.settings')
django.setup()

from django.contrib.auth.models import User
from django.test import Client
from django.urls import reverse
from notificacoes.models import (
    TipoNotificacao, Notificacao, PreferenciaNotificacao, 
    LogNotificacao, TemplateNotificacao
)
from notificacoes.services import notificacao_service, configuracao_service

def testar_modelos_notificacoes():
    """Testa os modelos de notifica√ß√µes"""
    print("üîß Testando modelos de notifica√ß√µes...")
    
    # Testar cria√ß√£o de tipo de notifica√ß√£o
    tipo, created = TipoNotificacao.objects.get_or_create(
        codigo='TESTE',
        defaults={
            'nome': 'Notifica√ß√£o de Teste',
            'descricao': 'Tipo de notifica√ß√£o para testes',
            'template_email': 'Teste: {{mensagem}}',
            'template_sms': 'Teste: {{mensagem}}',
            'template_push': 'Teste: {{mensagem}}'
        }
    )
    print(f"‚úÖ Tipo de notifica√ß√£o: {tipo.nome}")
    
    # Testar cria√ß√£o de template
    template, created = TemplateNotificacao.objects.get_or_create(
        tipo_notificacao=tipo,
        canal='email',
        defaults={
            'nome': 'Template de Teste',
            'assunto': 'Teste',
            'conteudo': 'Teste: {{mensagem}}',
            'variaveis': ['mensagem']
        }
    )
    print(f"‚úÖ Template criado: {template.nome}")
    
    # Testar cria√ß√£o de notifica√ß√£o
    usuario = User.objects.first()
    if not usuario:
        print("‚ùå Nenhum usu√°rio encontrado para teste")
        return False
    
    notificacao = Notificacao.objects.create(
        tipo=tipo,
        destinatario=usuario,
        titulo='Teste de Notifica√ß√£o',
        mensagem='Esta √© uma notifica√ß√£o de teste',
        dados_extras={'teste': 'valor_teste'},
        prioridade='normal'
    )
    print(f"‚úÖ Notifica√ß√£o criada: {notificacao.id}")
    
    # Testar m√©todos da notifica√ß√£o
    notificacao.marcar_como_enviada()
    print(f"‚úÖ Notifica√ß√£o marcada como enviada: {notificacao.status}")
    
    notificacao.marcar_como_lida()
    print(f"‚úÖ Notifica√ß√£o marcada como lida: {notificacao.status}")
    
    # Testar prefer√™ncias
    preferencia, created = PreferenciaNotificacao.objects.get_or_create(
        usuario=usuario,
        tipo_notificacao=tipo,
        canal='email',
        defaults={'ativo': True}
    )
    print(f"‚úÖ Prefer√™ncia criada: {preferencia}")
    
    # Testar log
    log = LogNotificacao.objects.create(
        notificacao=notificacao,
        canal='email',
        resultado='sucesso',
        tentativas=1
    )
    print(f"‚úÖ Log criado: {log}")
    
    return True

def testar_servicos_notificacoes():
    """Testa os servi√ßos de notifica√ß√µes"""
    print("\nüîß Testando servi√ßos de notifica√ß√µes...")
    
    usuario = User.objects.first()
    if not usuario:
        print("‚ùå Nenhum usu√°rio encontrado para teste")
        return False
    
    # Testar cria√ß√£o via servi√ßo
    try:
        notificacao = notificacao_service.criar_notificacao(
            tipo_codigo='TESTE',
            destinatario_id=usuario.id,
            titulo='Teste via Servi√ßo',
            mensagem='Notifica√ß√£o criada via servi√ßo',
            dados_extras={'servico': 'teste'},
            prioridade='alta'
        )
        print(f"‚úÖ Notifica√ß√£o criada via servi√ßo: {notificacao.id}")
    except Exception as e:
        print(f"‚ùå Erro ao criar notifica√ß√£o via servi√ßo: {e}")
        return False
    
    # Testar configura√ß√£o de prefer√™ncias
    configuracoes = {
        'TESTE': ['email', 'sistema'],
        'SISTEMA': ['push', 'sistema']
    }
    
    try:
        success = configuracao_service.configurar_preferencias_usuario(
            usuario.id, configuracoes
        )
        if success:
            print("‚úÖ Prefer√™ncias configuradas via servi√ßo")
        else:
            print("‚ùå Erro ao configurar prefer√™ncias")
    except Exception as e:
        print(f"‚ùå Erro ao configurar prefer√™ncias: {e}")
    
    # Testar estat√≠sticas
    try:
        stats = configuracao_service.obter_estatisticas_notificacoes(usuario.id)
        print(f"‚úÖ Estat√≠sticas obtidas: {stats['total']} notifica√ß√µes")
    except Exception as e:
        print(f"‚ùå Erro ao obter estat√≠sticas: {e}")
    
    return True

def testar_views_notificacoes():
    """Testa as views de notifica√ß√µes"""
    print("\nüîß Testando views de notifica√ß√µes...")
    
    client = Client()
    
    # Testar listagem de notifica√ß√µes
    try:
        response = client.get('/notificacoes/')
        if response.status_code == 200:
            print("‚úÖ Lista de notifica√ß√µes acess√≠vel")
        else:
            print(f"‚ùå Erro ao acessar lista: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro ao testar lista: {e}")
    
    # Testar API de notifica√ß√µes
    try:
        response = client.get('/api/notificacoes/')
        if response.status_code in [200, 401]:  # 401 √© esperado se n√£o autenticado
            print("‚úÖ API de notifica√ß√µes acess√≠vel")
        else:
            print(f"‚ùå Erro ao acessar API: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro ao testar API: {e}")
    
    return True

def testar_urls_notificacoes():
    """Testa as URLs de notifica√ß√µes"""
    print("\nüîß Testando URLs de notifica√ß√µes...")
    
    # Testar URLs principais
    urls_teste = [
        'notificacoes:list',
        'notificacoes:detail',
        'notificacoes:configuracoes',
        'notificacoes:estatisticas'
    ]
    
    for url_name in urls_teste:
        try:
            url = reverse(url_name)
            print(f"‚úÖ URL {url_name}: {url}")
        except Exception as e:
            print(f"‚ùå Erro na URL {url_name}: {e}")
    
    return True

def testar_admin_notificacoes():
    """Testa o admin de notifica√ß√µes"""
    print("\nüîß Testando admin de notifica√ß√µes...")
    
    # Verificar se os modelos est√£o registrados no admin
    from django.contrib import admin
    from notificacoes.admin import NotificacaoAdmin, TipoNotificacaoAdmin
    
    try:
        # Verificar se os modelos est√£o registrados
        if admin.site.is_registered(Notificacao):
            print("‚úÖ Modelo Notificacao registrado no admin")
        else:
            print("‚ùå Modelo Notificacao n√£o registrado no admin")
        
        if admin.site.is_registered(TipoNotificacao):
            print("‚úÖ Modelo TipoNotificacao registrado no admin")
        else:
            print("‚ùå Modelo TipoNotificacao n√£o registrado no admin")
        
        if admin.site.is_registered(PreferenciaNotificacao):
            print("‚úÖ Modelo PreferenciaNotificacao registrado no admin")
        else:
            print("‚ùå Modelo PreferenciaNotificacao n√£o registrado no admin")
        
        if admin.site.is_registered(LogNotificacao):
            print("‚úÖ Modelo LogNotificacao registrado no admin")
        else:
            print("‚ùå Modelo LogNotificacao n√£o registrado no admin")
        
        if admin.site.is_registered(TemplateNotificacao):
            print("‚úÖ Modelo TemplateNotificacao registrado no admin")
        else:
            print("‚ùå Modelo TemplateNotificacao n√£o registrado no admin")
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar admin: {e}")
    
    return True

def testar_comando_processamento():
    """Testa o comando de processamento"""
    print("\nüîß Testando comando de processamento...")
    
    try:
        from django.core.management import call_command
        from io import StringIO
        
        # Capturar sa√≠da do comando
        out = StringIO()
        call_command('processar_notificacoes', '--estatisticas', stdout=out)
        
        output = out.getvalue()
        if 'Processamento de notifica√ß√µes conclu√≠do' in output:
            print("‚úÖ Comando de processamento funcionando")
        else:
            print("‚ùå Comando de processamento com problemas")
            print(f"Sa√≠da: {output}")
        
    except Exception as e:
        print(f"‚ùå Erro ao testar comando: {e}")
    
    return True

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Testando m√≥dulo de notifica√ß√µes...")
    print("=" * 60)
    
    # Executar todos os testes
    testes = [
        testar_modelos_notificacoes,
        testar_servicos_notificacoes,
        testar_views_notificacoes,
        testar_urls_notificacoes,
        testar_admin_notificacoes,
        testar_comando_processamento
    ]
    
    resultados = []
    for teste in testes:
        try:
            resultado = teste()
            resultados.append(resultado)
        except Exception as e:
            print(f"‚ùå Erro no teste {teste.__name__}: {e}")
            resultados.append(False)
    
    # Resumo dos resultados
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES:")
    
    testes_nomes = [
        "Modelos",
        "Servi√ßos", 
        "Views",
        "URLs",
        "Admin",
        "Comando"
    ]
    
    for i, (nome, resultado) in enumerate(zip(testes_nomes, resultados)):
        status = "‚úÖ PASSOU" if resultado else "‚ùå FALHOU"
        print(f"   {nome}: {status}")
    
    total_passou = sum(resultados)
    total_testes = len(resultados)
    
    print(f"\nüéØ Resultado: {total_passou}/{total_testes} testes passaram")
    
    if total_passou == total_testes:
        print("üéâ Todos os testes passaram! M√≥dulo funcionando corretamente.")
    else:
        print("‚ö†Ô∏è  Alguns testes falharam. Verifique os erros acima.")
    
    return total_passou == total_testes

if __name__ == '__main__':
    main()
