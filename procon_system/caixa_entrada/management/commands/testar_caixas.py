from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from caixa_entrada.models import CaixaEntrada
from fiscalizacao.models import AutoInfracao
from peticionamento.models import PeticaoEletronica, TipoPeticao
from datetime import datetime

class Command(BaseCommand):
    help = 'Testa se as caixas de entrada est√£o funcionando corretamente'

    def handle(self, *args, **options):
        self.stdout.write("üöÄ TESTE DAS CAIXAS DE ENTRADA")
        self.stdout.write("="*50)
        
        try:
            # 1. Verificar se as tabelas existem
            self.stdout.write("1. Verificando tabelas...")
            total_caixa = CaixaEntrada.objects.count()
            total_autos = AutoInfracao.objects.count()
            total_peticoes = PeticaoEletronica.objects.count()
            
            self.stdout.write(f"   ‚úÖ CaixaEntrada: {total_caixa} documentos")
            self.stdout.write(f"   ‚úÖ AutoInfracao: {total_autos} autos")
            self.stdout.write(f"   ‚úÖ PeticaoEletronica: {total_peticoes} peti√ß√µes")
            
            # 2. Verificar documentos por setor
            self.stdout.write("\n2. Documentos por setor:")
            setores = ['Atendimento', 'Fiscaliza√ß√£o', 'Jur√≠dico', 'Financeiro', 'Diretoria']
            
            for setor in setores:
                count = CaixaEntrada.objects.filter(setor_destino=setor).count()
                self.stdout.write(f"   üì¨ {setor}: {count} documento(s)")
            
            # 3. Testar cria√ß√£o de auto (den√∫ncia)
            self.stdout.write("\n3. Testando cria√ß√£o de den√∫ncia (Auto de Infra√ß√£o)...")
            
            # Criar um auto de teste
            auto_teste = AutoInfracao.objects.create(
                numero='TEST-DENUNCIA/2025',
                data_fiscalizacao=datetime.now().date(),
                hora_fiscalizacao=datetime.now().time(),
                razao_social='Empresa Teste Den√∫ncia',
                atividade='Teste',
                endereco='Rua Teste',
                cnpj='11.111.111/0001-11',
                relatorio='Teste den√∫ncia',
                base_legal_cdc='Teste',
                valor_multa=1000.00,
                responsavel_nome='Teste',
                responsavel_cpf='111.111.111-11',
                fiscal_nome='Fiscal Teste',
                status='autuado'
            )
            
            # Verificar se foi criado na caixa da Fiscaliza√ß√£o
            doc_caixa = CaixaEntrada.objects.filter(
                content_type__model='autoinfracao',
                object_id=auto_teste.id
            ).first()
            
            if doc_caixa:
                self.stdout.write(f"   ‚úÖ DEN√öNCIA CRIADA NA CAIXA: {doc_caixa.setor_destino}")
                if doc_caixa.setor_destino == 'Fiscaliza√ß√£o':
                    self.stdout.write("   üéâ SUCESSO: Den√∫ncia chegou na caixa da Fiscaliza√ß√£o!")
                else:
                    self.stdout.write(f"   ‚ö†Ô∏è ATEN√á√ÉO: Den√∫ncia foi para {doc_caixa.setor_destino} (esperado: Fiscaliza√ß√£o)")
            else:
                self.stdout.write("   ‚ùå ERRO: Den√∫ncia n√£o apareceu na caixa")
            
            # 4. Testar cria√ß√£o de peti√ß√£o
            self.stdout.write("\n4. Testando cria√ß√£o de peti√ß√£o...")
            
            # Criar tipo de peti√ß√£o se n√£o existir
            tipo_peticao, created = TipoPeticao.objects.get_or_create(
                nome='RECURSO',
                defaults={'descricao': 'Recurso administrativo'}
            )
            
            # Criar uma peti√ß√£o de teste
            peticao_teste = PeticaoEletronica.objects.create(
                protocolo='TEST-PETICAO/2025',
                tipo_peticao=tipo_peticao,
                nome_peticionario='Advogado Teste',
                cpf_cnpj='111.111.111-11',
                email='teste@teste.com',
                telefone='(11) 1111-1111',
                assunto='Teste de peti√ß√£o',
                descricao='Peti√ß√£o de teste para verificar caixa',
                status='recebida'
            )
            
            # Verificar se foi criado na caixa do Jur√≠dico
            doc_caixa_peticao = CaixaEntrada.objects.filter(
                content_type__model='peticaoeletronica',
                object_id=peticao_teste.id
            ).first()
            
            if doc_caixa_peticao:
                self.stdout.write(f"   ‚úÖ PETI√á√ÉO CRIADA NA CAIXA: {doc_caixa_peticao.setor_destino}")
                if doc_caixa_peticao.setor_destino == 'Jur√≠dico':
                    self.stdout.write("   üéâ SUCESSO: Peti√ß√£o chegou na caixa do Jur√≠dico!")
                else:
                    self.stdout.write(f"   ‚ö†Ô∏è ATEN√á√ÉO: Peti√ß√£o foi para {doc_caixa_peticao.setor_destino} (esperado: Jur√≠dico)")
            else:
                self.stdout.write("   ‚ùå ERRO: Peti√ß√£o n√£o apareceu na caixa")
            
            # 5. Limpar dados de teste
            self.stdout.write("\n5. Limpando dados de teste...")
            auto_teste.delete()
            peticao_teste.delete()
            if doc_caixa:
                doc_caixa.delete()
            if doc_caixa_peticao:
                doc_caixa_peticao.delete()
            
            self.stdout.write("\n‚úÖ TESTE CONCLU√çDO!")
            self.stdout.write("üéâ As caixas de entrada est√£o funcionando corretamente!")
            
        except Exception as e:
            self.stdout.write(f"\n‚ùå ERRO NO TESTE: {e}")
            import traceback
            traceback.print_exc()
